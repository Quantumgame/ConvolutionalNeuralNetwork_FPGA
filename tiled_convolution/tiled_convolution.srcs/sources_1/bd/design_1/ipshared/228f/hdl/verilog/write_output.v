// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        curr_layer_out_w_c_dout,
        curr_layer_out_w_c_empty_n,
        curr_layer_out_w_c_read,
        curr_layer_out_h_c_dout,
        curr_layer_out_h_c_empty_n,
        curr_layer_out_h_c_read,
        curr_layer_out_ch_c_dout,
        curr_layer_out_ch_c_empty_n,
        curr_layer_out_ch_c_read,
        m_axi_out_r_AWVALID,
        m_axi_out_r_AWREADY,
        m_axi_out_r_AWADDR,
        m_axi_out_r_AWID,
        m_axi_out_r_AWLEN,
        m_axi_out_r_AWSIZE,
        m_axi_out_r_AWBURST,
        m_axi_out_r_AWLOCK,
        m_axi_out_r_AWCACHE,
        m_axi_out_r_AWPROT,
        m_axi_out_r_AWQOS,
        m_axi_out_r_AWREGION,
        m_axi_out_r_AWUSER,
        m_axi_out_r_WVALID,
        m_axi_out_r_WREADY,
        m_axi_out_r_WDATA,
        m_axi_out_r_WSTRB,
        m_axi_out_r_WLAST,
        m_axi_out_r_WID,
        m_axi_out_r_WUSER,
        m_axi_out_r_ARVALID,
        m_axi_out_r_ARREADY,
        m_axi_out_r_ARADDR,
        m_axi_out_r_ARID,
        m_axi_out_r_ARLEN,
        m_axi_out_r_ARSIZE,
        m_axi_out_r_ARBURST,
        m_axi_out_r_ARLOCK,
        m_axi_out_r_ARCACHE,
        m_axi_out_r_ARPROT,
        m_axi_out_r_ARQOS,
        m_axi_out_r_ARREGION,
        m_axi_out_r_ARUSER,
        m_axi_out_r_RVALID,
        m_axi_out_r_RREADY,
        m_axi_out_r_RDATA,
        m_axi_out_r_RLAST,
        m_axi_out_r_RID,
        m_axi_out_r_RUSER,
        m_axi_out_r_RRESP,
        m_axi_out_r_BVALID,
        m_axi_out_r_BREADY,
        m_axi_out_r_BRESP,
        m_axi_out_r_BID,
        m_axi_out_r_BUSER,
        out_offset_dout,
        out_offset_empty_n,
        out_offset_read,
        to_c_dout,
        to_c_empty_n,
        to_c_read,
        row_c_dout,
        row_c_empty_n,
        row_c_read,
        col_c_dout,
        col_c_empty_n,
        col_c_read,
        biasbuf_V_address0,
        biasbuf_V_ce0,
        biasbuf_V_q0,
        outputfm_V_0_address0,
        outputfm_V_0_ce0,
        outputfm_V_0_q0,
        outputfm_V_1_address0,
        outputfm_V_1_ce0,
        outputfm_V_1_q0,
        outputfm_V_10_address0,
        outputfm_V_10_ce0,
        outputfm_V_10_q0,
        outputfm_V_11_address0,
        outputfm_V_11_ce0,
        outputfm_V_11_q0,
        outputfm_V_12_address0,
        outputfm_V_12_ce0,
        outputfm_V_12_q0,
        outputfm_V_13_address0,
        outputfm_V_13_ce0,
        outputfm_V_13_q0,
        outputfm_V_14_address0,
        outputfm_V_14_ce0,
        outputfm_V_14_q0,
        outputfm_V_15_address0,
        outputfm_V_15_ce0,
        outputfm_V_15_q0,
        outputfm_V_16_address0,
        outputfm_V_16_ce0,
        outputfm_V_16_q0,
        outputfm_V_17_address0,
        outputfm_V_17_ce0,
        outputfm_V_17_q0,
        outputfm_V_18_address0,
        outputfm_V_18_ce0,
        outputfm_V_18_q0,
        outputfm_V_19_address0,
        outputfm_V_19_ce0,
        outputfm_V_19_q0,
        outputfm_V_2_address0,
        outputfm_V_2_ce0,
        outputfm_V_2_q0,
        outputfm_V_20_address0,
        outputfm_V_20_ce0,
        outputfm_V_20_q0,
        outputfm_V_21_address0,
        outputfm_V_21_ce0,
        outputfm_V_21_q0,
        outputfm_V_22_address0,
        outputfm_V_22_ce0,
        outputfm_V_22_q0,
        outputfm_V_23_address0,
        outputfm_V_23_ce0,
        outputfm_V_23_q0,
        outputfm_V_24_address0,
        outputfm_V_24_ce0,
        outputfm_V_24_q0,
        outputfm_V_25_address0,
        outputfm_V_25_ce0,
        outputfm_V_25_q0,
        outputfm_V_26_address0,
        outputfm_V_26_ce0,
        outputfm_V_26_q0,
        outputfm_V_27_address0,
        outputfm_V_27_ce0,
        outputfm_V_27_q0,
        outputfm_V_3_address0,
        outputfm_V_3_ce0,
        outputfm_V_3_q0,
        outputfm_V_4_address0,
        outputfm_V_4_ce0,
        outputfm_V_4_q0,
        outputfm_V_5_address0,
        outputfm_V_5_ce0,
        outputfm_V_5_q0,
        outputfm_V_6_address0,
        outputfm_V_6_ce0,
        outputfm_V_6_q0,
        outputfm_V_7_address0,
        outputfm_V_7_ce0,
        outputfm_V_7_q0,
        outputfm_V_8_address0,
        outputfm_V_8_ce0,
        outputfm_V_8_q0,
        outputfm_V_9_address0,
        outputfm_V_9_ce0,
        outputfm_V_9_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state23 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] curr_layer_out_w_c_dout;
input   curr_layer_out_w_c_empty_n;
output   curr_layer_out_w_c_read;
input  [15:0] curr_layer_out_h_c_dout;
input   curr_layer_out_h_c_empty_n;
output   curr_layer_out_h_c_read;
input  [15:0] curr_layer_out_ch_c_dout;
input   curr_layer_out_ch_c_empty_n;
output   curr_layer_out_ch_c_read;
output   m_axi_out_r_AWVALID;
input   m_axi_out_r_AWREADY;
output  [31:0] m_axi_out_r_AWADDR;
output  [0:0] m_axi_out_r_AWID;
output  [31:0] m_axi_out_r_AWLEN;
output  [2:0] m_axi_out_r_AWSIZE;
output  [1:0] m_axi_out_r_AWBURST;
output  [1:0] m_axi_out_r_AWLOCK;
output  [3:0] m_axi_out_r_AWCACHE;
output  [2:0] m_axi_out_r_AWPROT;
output  [3:0] m_axi_out_r_AWQOS;
output  [3:0] m_axi_out_r_AWREGION;
output  [0:0] m_axi_out_r_AWUSER;
output   m_axi_out_r_WVALID;
input   m_axi_out_r_WREADY;
output  [31:0] m_axi_out_r_WDATA;
output  [3:0] m_axi_out_r_WSTRB;
output   m_axi_out_r_WLAST;
output  [0:0] m_axi_out_r_WID;
output  [0:0] m_axi_out_r_WUSER;
output   m_axi_out_r_ARVALID;
input   m_axi_out_r_ARREADY;
output  [31:0] m_axi_out_r_ARADDR;
output  [0:0] m_axi_out_r_ARID;
output  [31:0] m_axi_out_r_ARLEN;
output  [2:0] m_axi_out_r_ARSIZE;
output  [1:0] m_axi_out_r_ARBURST;
output  [1:0] m_axi_out_r_ARLOCK;
output  [3:0] m_axi_out_r_ARCACHE;
output  [2:0] m_axi_out_r_ARPROT;
output  [3:0] m_axi_out_r_ARQOS;
output  [3:0] m_axi_out_r_ARREGION;
output  [0:0] m_axi_out_r_ARUSER;
input   m_axi_out_r_RVALID;
output   m_axi_out_r_RREADY;
input  [31:0] m_axi_out_r_RDATA;
input   m_axi_out_r_RLAST;
input  [0:0] m_axi_out_r_RID;
input  [0:0] m_axi_out_r_RUSER;
input  [1:0] m_axi_out_r_RRESP;
input   m_axi_out_r_BVALID;
output   m_axi_out_r_BREADY;
input  [1:0] m_axi_out_r_BRESP;
input  [0:0] m_axi_out_r_BID;
input  [0:0] m_axi_out_r_BUSER;
input  [29:0] out_offset_dout;
input   out_offset_empty_n;
output   out_offset_read;
input  [31:0] to_c_dout;
input   to_c_empty_n;
output   to_c_read;
input  [31:0] row_c_dout;
input   row_c_empty_n;
output   row_c_read;
input  [31:0] col_c_dout;
input   col_c_empty_n;
output   col_c_read;
output  [6:0] biasbuf_V_address0;
output   biasbuf_V_ce0;
input  [47:0] biasbuf_V_q0;
output  [9:0] outputfm_V_0_address0;
output   outputfm_V_0_ce0;
input  [47:0] outputfm_V_0_q0;
output  [9:0] outputfm_V_1_address0;
output   outputfm_V_1_ce0;
input  [47:0] outputfm_V_1_q0;
output  [9:0] outputfm_V_10_address0;
output   outputfm_V_10_ce0;
input  [47:0] outputfm_V_10_q0;
output  [9:0] outputfm_V_11_address0;
output   outputfm_V_11_ce0;
input  [47:0] outputfm_V_11_q0;
output  [9:0] outputfm_V_12_address0;
output   outputfm_V_12_ce0;
input  [47:0] outputfm_V_12_q0;
output  [9:0] outputfm_V_13_address0;
output   outputfm_V_13_ce0;
input  [47:0] outputfm_V_13_q0;
output  [9:0] outputfm_V_14_address0;
output   outputfm_V_14_ce0;
input  [47:0] outputfm_V_14_q0;
output  [9:0] outputfm_V_15_address0;
output   outputfm_V_15_ce0;
input  [47:0] outputfm_V_15_q0;
output  [9:0] outputfm_V_16_address0;
output   outputfm_V_16_ce0;
input  [47:0] outputfm_V_16_q0;
output  [9:0] outputfm_V_17_address0;
output   outputfm_V_17_ce0;
input  [47:0] outputfm_V_17_q0;
output  [9:0] outputfm_V_18_address0;
output   outputfm_V_18_ce0;
input  [47:0] outputfm_V_18_q0;
output  [9:0] outputfm_V_19_address0;
output   outputfm_V_19_ce0;
input  [47:0] outputfm_V_19_q0;
output  [9:0] outputfm_V_2_address0;
output   outputfm_V_2_ce0;
input  [47:0] outputfm_V_2_q0;
output  [9:0] outputfm_V_20_address0;
output   outputfm_V_20_ce0;
input  [47:0] outputfm_V_20_q0;
output  [9:0] outputfm_V_21_address0;
output   outputfm_V_21_ce0;
input  [47:0] outputfm_V_21_q0;
output  [9:0] outputfm_V_22_address0;
output   outputfm_V_22_ce0;
input  [47:0] outputfm_V_22_q0;
output  [9:0] outputfm_V_23_address0;
output   outputfm_V_23_ce0;
input  [47:0] outputfm_V_23_q0;
output  [9:0] outputfm_V_24_address0;
output   outputfm_V_24_ce0;
input  [47:0] outputfm_V_24_q0;
output  [9:0] outputfm_V_25_address0;
output   outputfm_V_25_ce0;
input  [47:0] outputfm_V_25_q0;
output  [9:0] outputfm_V_26_address0;
output   outputfm_V_26_ce0;
input  [47:0] outputfm_V_26_q0;
output  [9:0] outputfm_V_27_address0;
output   outputfm_V_27_ce0;
input  [47:0] outputfm_V_27_q0;
output  [9:0] outputfm_V_3_address0;
output   outputfm_V_3_ce0;
input  [47:0] outputfm_V_3_q0;
output  [9:0] outputfm_V_4_address0;
output   outputfm_V_4_ce0;
input  [47:0] outputfm_V_4_q0;
output  [9:0] outputfm_V_5_address0;
output   outputfm_V_5_ce0;
input  [47:0] outputfm_V_5_q0;
output  [9:0] outputfm_V_6_address0;
output   outputfm_V_6_ce0;
input  [47:0] outputfm_V_6_q0;
output  [9:0] outputfm_V_7_address0;
output   outputfm_V_7_ce0;
input  [47:0] outputfm_V_7_q0;
output  [9:0] outputfm_V_8_address0;
output   outputfm_V_8_ce0;
input  [47:0] outputfm_V_8_q0;
output  [9:0] outputfm_V_9_address0;
output   outputfm_V_9_ce0;
input  [47:0] outputfm_V_9_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg curr_layer_out_w_c_read;
reg curr_layer_out_h_c_read;
reg curr_layer_out_ch_c_read;
reg m_axi_out_r_AWVALID;
reg m_axi_out_r_WVALID;
reg m_axi_out_r_BREADY;
reg out_offset_read;
reg to_c_read;
reg row_c_read;
reg col_c_read;
reg biasbuf_V_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    curr_layer_out_w_c_blk_n;
reg    curr_layer_out_h_c_blk_n;
reg    curr_layer_out_ch_c_blk_n;
reg    out_r_blk_n_AW;
reg    ap_enable_reg_pp0_iter11;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987;
reg    out_r_blk_n_W;
reg    ap_enable_reg_pp0_iter12;
reg   [0:0] ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987;
reg    out_r_blk_n_B;
reg    ap_enable_reg_pp0_iter17;
reg   [0:0] ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987;
reg    out_offset_blk_n;
reg    to_c_blk_n;
reg    row_c_blk_n;
reg    col_c_blk_n;
reg   [15:0] i_index_i_i_i_i_reg_312;
reg   [15:0] ii_index_i_i_i_i_reg_324;
reg   [30:0] itr_i_i_i_i_reg_336;
reg   [31:0] i_i_i_i_i_reg_347;
reg   [31:0] j_i_i_i_i_reg_358;
reg   [31:0] ii_i_i_i_i_reg_369;
reg   [29:0] out_offset_read_reg_865;
reg    ap_block_state1;
reg  signed [15:0] curr_layer_out_w_c_r_reg_870;
reg   [15:0] curr_layer_out_h_c_r_reg_878;
reg   [15:0] curr_layer_out_ch_c_s_reg_884;
reg  signed [31:0] to_c_read_reg_890;
reg  signed [31:0] row_c_read_reg_898;
reg   [31:0] col_c_read_reg_905;
wire   [0:0] tmp_32_i_i_i_i_fu_446_p2;
reg   [0:0] tmp_32_i_i_i_i_reg_912;
wire   [0:0] tmp_34_i_i_i_i_fu_452_p2;
reg   [0:0] tmp_34_i_i_i_i_reg_917;
wire  signed [31:0] tmp_i_i_i_i_fu_458_p1;
reg  signed [31:0] tmp_i_i_i_i_reg_922;
wire    ap_CS_fsm_state2;
wire  signed [31:0] out_size_fu_854_p2;
reg  signed [31:0] out_size_reg_929;
wire   [0:0] tmp_33_i_i_i_i_fu_474_p2;
reg   [0:0] tmp_33_i_i_i_i_reg_935;
wire  signed [31:0] n_rows_1_fu_508_p3;
reg  signed [31:0] n_rows_1_reg_940;
wire  signed [31:0] n_depth_o_1_fu_532_p3;
reg  signed [31:0] n_depth_o_1_reg_946;
wire   [31:0] tmp_30_i_i_i_i_fu_540_p2;
reg   [31:0] tmp_30_i_i_i_i_reg_951;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_31_i_i_i_i_fu_544_p2;
reg   [31:0] tmp_31_i_i_i_i_reg_956;
wire  signed [31:0] n_cols_1_fu_572_p3;
reg  signed [31:0] n_cols_1_reg_961;
wire  signed [31:0] tmp_i_i_fu_580_p2;
reg  signed [31:0] tmp_i_i_reg_967;
wire   [31:0] tmp_46_i_i_i_i_fu_584_p2;
reg   [31:0] tmp_46_i_i_i_i_reg_972;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp1_i_i_fu_592_p2;
reg   [31:0] tmp1_i_i_reg_977;
wire   [32:0] sext_cast_i_i_fu_597_p1;
reg   [32:0] sext_cast_i_i_reg_982;
wire   [0:0] tmp_47_i_i_i_i_fu_604_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
wire    ap_block_state15_pp0_stage0_iter10;
wire    ap_block_state16_pp0_stage0_iter11;
reg    ap_sig_ioackin_m_axi_out_r_AWREADY;
reg    ap_block_state16_io;
wire    ap_block_state17_pp0_stage0_iter12;
reg    ap_sig_ioackin_m_axi_out_r_WREADY;
reg    ap_block_state17_io;
wire    ap_block_state18_pp0_stage0_iter13;
wire    ap_block_state19_pp0_stage0_iter14;
wire    ap_block_state20_pp0_stage0_iter15;
wire    ap_block_state21_pp0_stage0_iter16;
reg    ap_block_state22_pp0_stage0_iter17;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter3_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter4_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter5_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter6_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter7_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter8_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter9_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter12_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter13_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter14_tmp_47_i_i_i_i_reg_987;
reg   [0:0] ap_reg_pp0_iter15_tmp_47_i_i_i_i_reg_987;
wire   [30:0] itr_i_i_fu_609_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_49_i_i_i_i_fu_615_p2;
reg   [0:0] tmp_49_i_i_i_i_reg_996;
reg   [0:0] ap_reg_pp0_iter1_tmp_49_i_i_i_i_reg_996;
wire   [15:0] tmp_fu_620_p1;
reg   [15:0] tmp_reg_1002;
wire  signed [31:0] ii_fu_635_p2;
reg  signed [31:0] ii_reg_1007;
wire   [0:0] sel_tmp_i_i_fu_641_p2;
reg   [0:0] sel_tmp_i_i_reg_1012;
reg   [0:0] ap_reg_pp0_iter1_sel_tmp_i_i_reg_1012;
wire   [31:0] i_2_i_i_i_i_fu_655_p3;
reg   [31:0] i_2_i_i_i_i_reg_1018;
wire   [31:0] j_2_i_i_i_i_fu_663_p3;
reg   [31:0] j_2_i_i_i_i_reg_1024;
reg   [31:0] ap_reg_pp0_iter1_j_2_i_i_i_i_reg_1024;
wire   [31:0] ii_3_fu_679_p3;
reg   [31:0] ii_3_reg_1030;
wire   [4:0] tmp_38_fu_687_p1;
reg   [4:0] tmp_38_reg_1036;
wire   [31:0] j_fu_691_p2;
wire  signed [15:0] i_index_fu_860_p2;
reg  signed [15:0] i_index_reg_1046;
wire   [31:0] tmp_53_i_i_i_i_fu_702_p2;
reg   [31:0] tmp_53_i_i_i_i_reg_1051;
wire   [31:0] tmp_56_i_i_i_i_fu_706_p2;
reg   [31:0] tmp_56_i_i_i_i_reg_1056;
wire   [15:0] i_index_2_i_i_i_i_fu_719_p3;
reg   [15:0] i_index_2_i_i_i_i_reg_1061;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] ii_index_2_fu_733_p3;
reg   [15:0] ii_index_2_reg_1066;
wire   [31:0] tmp_67_i_i_i_i_fu_767_p2;
reg   [31:0] tmp_67_i_i_i_i_reg_1076;
wire   [47:0] grp_aesl_mux_load_28_35_s_fu_380_ap_return;
reg   [47:0] p_Val2_s_reg_1081;
reg   [47:0] p_Val2_1_reg_1086;
reg   [31:0] out_addr_reg_1091;
reg   [31:0] ap_reg_pp0_iter4_out_addr_reg_1091;
reg   [31:0] ap_reg_pp0_iter5_out_addr_reg_1091;
reg   [31:0] ap_reg_pp0_iter6_out_addr_reg_1091;
reg   [31:0] ap_reg_pp0_iter7_out_addr_reg_1091;
reg   [31:0] ap_reg_pp0_iter8_out_addr_reg_1091;
reg   [31:0] ap_reg_pp0_iter9_out_addr_reg_1091;
reg   [31:0] ap_reg_pp0_iter10_out_addr_reg_1091;
wire   [48:0] tmp_60_i_i_i_i_fu_796_p2;
reg   [48:0] tmp_60_i_i_i_i_reg_1097;
wire   [0:0] tmp_61_i_i_i_i_fu_802_p2;
reg   [0:0] tmp_61_i_i_i_i_reg_1102;
reg   [0:0] ap_reg_pp0_iter5_tmp_61_i_i_i_i_reg_1102;
reg   [0:0] ap_reg_pp0_iter6_tmp_61_i_i_i_i_reg_1102;
reg   [0:0] ap_reg_pp0_iter7_tmp_61_i_i_i_i_reg_1102;
reg   [0:0] ap_reg_pp0_iter8_tmp_61_i_i_i_i_reg_1102;
reg   [0:0] ap_reg_pp0_iter9_tmp_61_i_i_i_i_reg_1102;
reg   [0:0] ap_reg_pp0_iter10_tmp_61_i_i_i_i_reg_1102;
wire   [31:0] grp_fu_443_p1;
reg   [31:0] dp_reg_1112;
wire   [31:0] p_0_i_i_i_i_i_fu_847_p3;
reg   [31:0] p_0_i_i_i_i_i_reg_1117;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
wire    grp_aesl_mux_load_28_35_s_fu_380_ap_start;
wire    grp_aesl_mux_load_28_35_s_fu_380_ap_done;
wire    grp_aesl_mux_load_28_35_s_fu_380_ap_idle;
wire    grp_aesl_mux_load_28_35_s_fu_380_ap_ready;
reg    grp_aesl_mux_load_28_35_s_fu_380_ap_ce;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_ce0;
wire   [9:0] grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_address0;
wire    grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_ce0;
reg   [15:0] ap_phi_mux_i_index_i_i_i_i_phi_fu_316_p4;
reg   [15:0] ap_phi_mux_ii_index_i_i_i_i_phi_fu_328_p4;
reg   [31:0] ap_phi_mux_i_i_i_i_i_phi_fu_351_p4;
reg   [31:0] ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4;
reg    ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start;
wire  signed [63:0] tmp_57_i_i_i_i_fu_740_p1;
wire  signed [63:0] sum_cast_i_i_fu_780_p1;
reg    ap_reg_ioackin_m_axi_out_r_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_m_axi_out_r_WREADY;
wire  signed [63:0] grp_fu_443_p0;
wire   [15:0] n_rows_fu_464_p3;
wire   [15:0] n_depth_o_fu_482_p3;
wire  signed [31:0] n_rows_cast_i_i_i_i_fu_470_p1;
wire   [31:0] tmp_36_i_i_i_i_fu_492_p2;
wire  signed [31:0] tmp_i_i_i_i_20_fu_461_p1;
wire   [0:0] tmp_37_i_i_i_i_fu_497_p2;
wire   [31:0] tmp_38_i_i_i_i_fu_503_p2;
wire  signed [31:0] n_depth_o_cast_i_i_i_fu_488_p1;
wire   [31:0] tmp_42_i_i_i_i_fu_516_p2;
wire  signed [31:0] tmp_35_i_i_i_i_fu_479_p1;
wire   [0:0] tmp_43_i_i_i_i_fu_521_p2;
wire   [31:0] tmp_44_i_i_i_i_fu_527_p2;
wire  signed [15:0] tmp_31_i_i_i_i_fu_544_p1;
wire   [15:0] n_cols_fu_548_p3;
wire  signed [31:0] n_cols_cast_i_i_i_i_fu_554_p1;
wire   [31:0] tmp_39_i_i_i_i_fu_558_p2;
wire   [0:0] tmp_40_i_i_i_i_fu_563_p2;
wire   [31:0] tmp_41_i_i_i_i_fu_568_p2;
wire   [31:0] tmp2_i_i_fu_588_p2;
wire   [31:0] itr_i_i_cast_i_i_fu_600_p1;
wire   [31:0] i_fu_624_p2;
wire   [0:0] tmp_52_i_i_i_i_fu_630_p2;
wire   [31:0] sel_tmp9_i_i_fu_647_p3;
wire   [31:0] ii_2_fu_671_p3;
wire   [15:0] sel_tmp1_i_i_fu_713_p3;
wire   [15:0] ii_index_fu_710_p1;
wire   [15:0] ii_index_1_fu_726_p3;
wire   [16:0] tmp_62_i_i_cast_i_i_fu_744_p1;
wire   [16:0] tmp_63_i_i_cast_i_i_fu_748_p1;
wire   [16:0] tmp4_i_i_fu_752_p2;
wire   [31:0] tmp4_cast_i_i_fu_758_p1;
wire   [31:0] tmp3_i_i_fu_762_p2;
wire  signed [32:0] tmp_68_i_i_cast_i_i_fu_772_p1;
wire   [32:0] sum_i_i_fu_775_p2;
wire  signed [48:0] tmp_58_i_i_i_i_fu_790_p1;
wire  signed [48:0] tmp_59_i_i_i_i_fu_793_p1;
wire   [31:0] res_V_1_fu_812_p1;
wire   [7:0] exp_V_fu_815_p4;
wire   [7:0] exp_V_2_fu_825_p2;
wire   [31:0] p_Result_s_fu_831_p5;
wire   [31:0] dp_1_fu_843_p1;
wire  signed [15:0] out_size_fu_854_p0;
wire  signed [15:0] i_index_fu_860_p0;
reg    grp_fu_443_ce;
wire    ap_CS_fsm_state23;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start = 1'b0;
#0 ap_reg_ioackin_m_axi_out_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_out_r_WREADY = 1'b0;
end

aesl_mux_load_28_35_s grp_aesl_mux_load_28_35_s_fu_380(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aesl_mux_load_28_35_s_fu_380_ap_start),
    .ap_done(grp_aesl_mux_load_28_35_s_fu_380_ap_done),
    .ap_idle(grp_aesl_mux_load_28_35_s_fu_380_ap_idle),
    .ap_ready(grp_aesl_mux_load_28_35_s_fu_380_ap_ready),
    .ap_ce(grp_aesl_mux_load_28_35_s_fu_380_ap_ce),
    .empty_11(tmp_38_reg_1036),
    .empty_12(i_2_i_i_i_i_reg_1018),
    .empty(j_2_i_i_i_i_reg_1024),
    .outputfm_V_0_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_address0),
    .outputfm_V_0_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_ce0),
    .outputfm_V_0_q0(outputfm_V_0_q0),
    .outputfm_V_1_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_address0),
    .outputfm_V_1_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_ce0),
    .outputfm_V_1_q0(outputfm_V_1_q0),
    .outputfm_V_10_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_address0),
    .outputfm_V_10_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_ce0),
    .outputfm_V_10_q0(outputfm_V_10_q0),
    .outputfm_V_11_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_address0),
    .outputfm_V_11_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_ce0),
    .outputfm_V_11_q0(outputfm_V_11_q0),
    .outputfm_V_12_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_address0),
    .outputfm_V_12_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_ce0),
    .outputfm_V_12_q0(outputfm_V_12_q0),
    .outputfm_V_13_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_address0),
    .outputfm_V_13_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_ce0),
    .outputfm_V_13_q0(outputfm_V_13_q0),
    .outputfm_V_14_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_address0),
    .outputfm_V_14_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_ce0),
    .outputfm_V_14_q0(outputfm_V_14_q0),
    .outputfm_V_15_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_address0),
    .outputfm_V_15_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_ce0),
    .outputfm_V_15_q0(outputfm_V_15_q0),
    .outputfm_V_16_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_address0),
    .outputfm_V_16_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_ce0),
    .outputfm_V_16_q0(outputfm_V_16_q0),
    .outputfm_V_17_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_address0),
    .outputfm_V_17_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_ce0),
    .outputfm_V_17_q0(outputfm_V_17_q0),
    .outputfm_V_18_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_address0),
    .outputfm_V_18_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_ce0),
    .outputfm_V_18_q0(outputfm_V_18_q0),
    .outputfm_V_19_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_address0),
    .outputfm_V_19_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_ce0),
    .outputfm_V_19_q0(outputfm_V_19_q0),
    .outputfm_V_2_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_address0),
    .outputfm_V_2_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_ce0),
    .outputfm_V_2_q0(outputfm_V_2_q0),
    .outputfm_V_20_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_address0),
    .outputfm_V_20_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_ce0),
    .outputfm_V_20_q0(outputfm_V_20_q0),
    .outputfm_V_21_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_address0),
    .outputfm_V_21_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_ce0),
    .outputfm_V_21_q0(outputfm_V_21_q0),
    .outputfm_V_22_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_address0),
    .outputfm_V_22_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_ce0),
    .outputfm_V_22_q0(outputfm_V_22_q0),
    .outputfm_V_23_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_address0),
    .outputfm_V_23_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_ce0),
    .outputfm_V_23_q0(outputfm_V_23_q0),
    .outputfm_V_24_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_address0),
    .outputfm_V_24_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_ce0),
    .outputfm_V_24_q0(outputfm_V_24_q0),
    .outputfm_V_25_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_address0),
    .outputfm_V_25_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_ce0),
    .outputfm_V_25_q0(outputfm_V_25_q0),
    .outputfm_V_26_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_address0),
    .outputfm_V_26_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_ce0),
    .outputfm_V_26_q0(outputfm_V_26_q0),
    .outputfm_V_27_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_address0),
    .outputfm_V_27_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_ce0),
    .outputfm_V_27_q0(outputfm_V_27_q0),
    .outputfm_V_3_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_address0),
    .outputfm_V_3_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_ce0),
    .outputfm_V_3_q0(outputfm_V_3_q0),
    .outputfm_V_4_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_address0),
    .outputfm_V_4_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_ce0),
    .outputfm_V_4_q0(outputfm_V_4_q0),
    .outputfm_V_5_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_address0),
    .outputfm_V_5_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_ce0),
    .outputfm_V_5_q0(outputfm_V_5_q0),
    .outputfm_V_6_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_address0),
    .outputfm_V_6_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_ce0),
    .outputfm_V_6_q0(outputfm_V_6_q0),
    .outputfm_V_7_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_address0),
    .outputfm_V_7_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_ce0),
    .outputfm_V_7_q0(outputfm_V_7_q0),
    .outputfm_V_8_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_address0),
    .outputfm_V_8_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_ce0),
    .outputfm_V_8_q0(outputfm_V_8_q0),
    .outputfm_V_9_address0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_address0),
    .outputfm_V_9_ce0(grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_ce0),
    .outputfm_V_9_q0(outputfm_V_9_q0),
    .ap_return(grp_aesl_mux_load_28_35_s_fu_380_ap_return)
);

zhang_cnn_sitofp_bMq #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
zhang_cnn_sitofp_bMq_U679(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_443_p0),
    .ce(grp_fu_443_ce),
    .dout(grp_fu_443_p1)
);

zhang_cnn_mul_muleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
zhang_cnn_mul_muleOg_U680(
    .din0(out_size_fu_854_p0),
    .din1(curr_layer_out_w_c_r_reg_870),
    .dout(out_size_fu_854_p2)
);

zhang_cnn_mul_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
zhang_cnn_mul_mulcud_U681(
    .din0(i_index_fu_860_p0),
    .din1(curr_layer_out_w_c_r_reg_870),
    .dout(i_index_fu_860_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state5 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter17 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_47_i_i_i_i_fu_604_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aesl_mux_load_28_35_s_fu_380_ap_ready)) begin
            ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_out_r_AWREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter11))) begin
            if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_out_r_AWREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'b1 == m_axi_out_r_AWREADY))) begin
                ap_reg_ioackin_m_axi_out_r_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_out_r_WREADY <= 1'b0;
    end else begin
        if (((1'd1 == ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
            if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_out_r_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'b1 == m_axi_out_r_WREADY))) begin
                ap_reg_ioackin_m_axi_out_r_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (tmp_47_i_i_i_i_reg_987 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_i_i_i_i_reg_347 <= i_2_i_i_i_i_reg_1018;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_i_i_i_reg_347 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        i_index_i_i_i_i_reg_312 <= i_index_2_i_i_i_i_reg_1061;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_index_i_i_i_i_reg_312 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (tmp_47_i_i_i_i_reg_987 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ii_i_i_i_i_reg_369 <= ii_3_reg_1030;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ii_i_i_i_i_reg_369 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        ii_index_i_i_i_i_reg_324 <= ii_index_2_reg_1066;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ii_index_i_i_i_i_reg_324 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_47_i_i_i_i_fu_604_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        itr_i_i_i_i_reg_336 <= itr_i_i_fu_609_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        itr_i_i_i_i_reg_336 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_47_i_i_i_i_fu_604_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_i_i_i_i_reg_358 <= j_fu_691_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_i_i_i_i_reg_358 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
        ap_reg_pp0_iter10_out_addr_reg_1091 <= ap_reg_pp0_iter9_out_addr_reg_1091;
        ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter9_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter10_tmp_61_i_i_i_i_reg_1102 <= ap_reg_pp0_iter9_tmp_61_i_i_i_i_reg_1102;
        ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter12_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter13_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter12_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter14_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter13_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter15_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter14_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter15_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter1_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter3_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter4_out_addr_reg_1091 <= out_addr_reg_1091;
        ap_reg_pp0_iter4_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter3_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter5_out_addr_reg_1091 <= ap_reg_pp0_iter4_out_addr_reg_1091;
        ap_reg_pp0_iter5_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter4_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter5_tmp_61_i_i_i_i_reg_1102 <= tmp_61_i_i_i_i_reg_1102;
        ap_reg_pp0_iter6_out_addr_reg_1091 <= ap_reg_pp0_iter5_out_addr_reg_1091;
        ap_reg_pp0_iter6_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter5_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter6_tmp_61_i_i_i_i_reg_1102 <= ap_reg_pp0_iter5_tmp_61_i_i_i_i_reg_1102;
        ap_reg_pp0_iter7_out_addr_reg_1091 <= ap_reg_pp0_iter6_out_addr_reg_1091;
        ap_reg_pp0_iter7_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter6_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter7_tmp_61_i_i_i_i_reg_1102 <= ap_reg_pp0_iter6_tmp_61_i_i_i_i_reg_1102;
        ap_reg_pp0_iter8_out_addr_reg_1091 <= ap_reg_pp0_iter7_out_addr_reg_1091;
        ap_reg_pp0_iter8_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter7_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter8_tmp_61_i_i_i_i_reg_1102 <= ap_reg_pp0_iter7_tmp_61_i_i_i_i_reg_1102;
        ap_reg_pp0_iter9_out_addr_reg_1091 <= ap_reg_pp0_iter8_out_addr_reg_1091;
        ap_reg_pp0_iter9_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter8_tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter9_tmp_61_i_i_i_i_reg_1102 <= ap_reg_pp0_iter8_tmp_61_i_i_i_i_reg_1102;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_j_2_i_i_i_i_reg_1024 <= j_2_i_i_i_i_reg_1024;
        ap_reg_pp0_iter1_sel_tmp_i_i_reg_1012 <= sel_tmp_i_i_reg_1012;
        ap_reg_pp0_iter1_tmp_47_i_i_i_i_reg_987 <= tmp_47_i_i_i_i_reg_987;
        ap_reg_pp0_iter1_tmp_49_i_i_i_i_reg_996 <= tmp_49_i_i_i_i_reg_996;
        tmp_47_i_i_i_i_reg_987 <= tmp_47_i_i_i_i_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_c_empty_n) | (1'b0 == curr_layer_out_h_c_empty_n) | (1'b0 == curr_layer_out_w_c_empty_n) | (1'b0 == ap_start) | (1'b0 == col_c_empty_n) | (1'b0 == row_c_empty_n) | (1'b0 == to_c_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_c_read_reg_905 <= col_c_dout;
        curr_layer_out_ch_c_s_reg_884 <= curr_layer_out_ch_c_dout;
        curr_layer_out_h_c_r_reg_878 <= curr_layer_out_h_c_dout;
        curr_layer_out_w_c_r_reg_870 <= curr_layer_out_w_c_dout;
        out_offset_read_reg_865 <= out_offset_dout;
        row_c_read_reg_898 <= row_c_dout;
        tmp_32_i_i_i_i_reg_912 <= tmp_32_i_i_i_i_fu_446_p2;
        tmp_34_i_i_i_i_reg_917 <= tmp_34_i_i_i_i_fu_452_p2;
        to_c_read_reg_890 <= to_c_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter9_tmp_61_i_i_i_i_reg_1102) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter9_tmp_47_i_i_i_i_reg_987))) begin
        dp_reg_1112 <= grp_fu_443_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_47_i_i_i_i_fu_604_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_i_i_i_i_reg_1018 <= i_2_i_i_i_i_fu_655_p3;
        ii_3_reg_1030 <= ii_3_fu_679_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_tmp_47_i_i_i_i_reg_987) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        i_index_2_i_i_i_i_reg_1061 <= i_index_2_i_i_i_i_fu_719_p3;
        ii_index_2_reg_1066 <= ii_index_2_fu_733_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == sel_tmp_i_i_reg_1012) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_49_i_i_i_i_reg_996) & (tmp_47_i_i_i_i_reg_987 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_index_reg_1046 <= i_index_fu_860_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_47_i_i_i_i_fu_604_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ii_reg_1007 <= ii_fu_635_p2;
        j_2_i_i_i_i_reg_1024 <= j_2_i_i_i_i_fu_663_p3;
        sel_tmp_i_i_reg_1012 <= sel_tmp_i_i_fu_641_p2;
        tmp_38_reg_1036 <= tmp_38_fu_687_p1;
        tmp_49_i_i_i_i_reg_996 <= tmp_49_i_i_i_i_fu_615_p2;
        tmp_reg_1002 <= tmp_fu_620_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        n_cols_1_reg_961 <= n_cols_1_fu_572_p3;
        tmp_30_i_i_i_i_reg_951 <= tmp_30_i_i_i_i_fu_540_p2;
        tmp_31_i_i_i_i_reg_956 <= tmp_31_i_i_i_i_fu_544_p2;
        tmp_i_i_reg_967 <= tmp_i_i_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_depth_o_1_reg_946 <= n_depth_o_1_fu_532_p3;
        n_rows_1_reg_940 <= n_rows_1_fu_508_p3;
        out_size_reg_929 <= out_size_fu_854_p2;
        tmp_33_i_i_i_i_reg_935 <= tmp_33_i_i_i_i_fu_474_p2;
        tmp_i_i_i_i_reg_922 <= tmp_i_i_i_i_fu_458_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987))) begin
        out_addr_reg_1091 <= sum_cast_i_i_fu_780_p1;
        p_Val2_1_reg_1086 <= biasbuf_V_q0;
        p_Val2_s_reg_1081 <= grp_aesl_mux_load_28_35_s_fu_380_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 == 1'd1))) begin
        p_0_i_i_i_i_i_reg_1117 <= p_0_i_i_i_i_i_fu_847_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sext_cast_i_i_reg_982[29 : 0] <= sext_cast_i_i_fu_597_p1[29 : 0];
        tmp1_i_i_reg_977 <= tmp1_i_i_fu_592_p2;
        tmp_46_i_i_i_i_reg_972 <= tmp_46_i_i_i_i_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == sel_tmp_i_i_reg_1012) & (1'd1 == tmp_49_i_i_i_i_reg_996) & (tmp_47_i_i_i_i_reg_987 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_53_i_i_i_i_reg_1051 <= tmp_53_i_i_i_i_fu_702_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (tmp_47_i_i_i_i_reg_987 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_56_i_i_i_i_reg_1056 <= tmp_56_i_i_i_i_fu_706_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter3_tmp_47_i_i_i_i_reg_987))) begin
        tmp_60_i_i_i_i_reg_1097 <= tmp_60_i_i_i_i_fu_796_p2;
        tmp_61_i_i_i_i_reg_1102 <= tmp_61_i_i_i_i_fu_802_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_tmp_47_i_i_i_i_reg_987))) begin
        tmp_67_i_i_i_i_reg_1076 <= tmp_67_i_i_i_i_fu_767_p2;
    end
end

always @ (*) begin
    if ((1'd0 == tmp_47_i_i_i_i_fu_604_p2)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter16) & (1'b0 == ap_enable_reg_pp0_iter15) & (1'b0 == ap_enable_reg_pp0_iter14) & (1'b0 == ap_enable_reg_pp0_iter13) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter17) & (1'b0 == ap_enable_reg_pp0_iter12) & (1'b0 == ap_enable_reg_pp0_iter11))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_47_i_i_i_i_reg_987 == 1'd1) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_i_i_i_i_phi_fu_351_p4 = i_2_i_i_i_i_reg_1018;
    end else begin
        ap_phi_mux_i_i_i_i_i_phi_fu_351_p4 = i_i_i_i_i_reg_347;
    end
end

always @ (*) begin
    if (((1'd1 == ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        ap_phi_mux_i_index_i_i_i_i_phi_fu_316_p4 = i_index_2_i_i_i_i_reg_1061;
    end else begin
        ap_phi_mux_i_index_i_i_i_i_phi_fu_316_p4 = i_index_i_i_i_i_reg_312;
    end
end

always @ (*) begin
    if (((tmp_47_i_i_i_i_reg_987 == 1'd1) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4 = ii_3_reg_1030;
    end else begin
        ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4 = ii_i_i_i_i_reg_369;
    end
end

always @ (*) begin
    if (((1'd1 == ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        ap_phi_mux_ii_index_i_i_i_i_phi_fu_328_p4 = ii_index_2_reg_1066;
    end else begin
        ap_phi_mux_ii_index_i_i_i_i_phi_fu_328_p4 = ii_index_i_i_i_i_reg_324;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_out_r_AWREADY)) begin
        ap_sig_ioackin_m_axi_out_r_AWREADY = m_axi_out_r_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_out_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_out_r_WREADY)) begin
        ap_sig_ioackin_m_axi_out_r_WREADY = m_axi_out_r_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_out_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        biasbuf_V_ce0 = 1'b1;
    end else begin
        biasbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_c_blk_n = col_c_empty_n;
    end else begin
        col_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_c_empty_n) | (1'b0 == curr_layer_out_h_c_empty_n) | (1'b0 == curr_layer_out_w_c_empty_n) | (1'b0 == ap_start) | (1'b0 == col_c_empty_n) | (1'b0 == row_c_empty_n) | (1'b0 == to_c_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_c_read = 1'b1;
    end else begin
        col_c_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_ch_c_blk_n = curr_layer_out_ch_c_empty_n;
    end else begin
        curr_layer_out_ch_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_c_empty_n) | (1'b0 == curr_layer_out_h_c_empty_n) | (1'b0 == curr_layer_out_w_c_empty_n) | (1'b0 == ap_start) | (1'b0 == col_c_empty_n) | (1'b0 == row_c_empty_n) | (1'b0 == to_c_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_ch_c_read = 1'b1;
    end else begin
        curr_layer_out_ch_c_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_h_c_blk_n = curr_layer_out_h_c_empty_n;
    end else begin
        curr_layer_out_h_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_c_empty_n) | (1'b0 == curr_layer_out_h_c_empty_n) | (1'b0 == curr_layer_out_w_c_empty_n) | (1'b0 == ap_start) | (1'b0 == col_c_empty_n) | (1'b0 == row_c_empty_n) | (1'b0 == to_c_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_h_c_read = 1'b1;
    end else begin
        curr_layer_out_h_c_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_w_c_blk_n = curr_layer_out_w_c_empty_n;
    end else begin
        curr_layer_out_w_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_c_empty_n) | (1'b0 == curr_layer_out_h_c_empty_n) | (1'b0 == curr_layer_out_w_c_empty_n) | (1'b0 == ap_start) | (1'b0 == col_c_empty_n) | (1'b0 == row_c_empty_n) | (1'b0 == to_c_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_w_c_read = 1'b1;
    end else begin
        curr_layer_out_w_c_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_aesl_mux_load_28_35_s_fu_380_ap_ce = 1'b1;
    end else begin
        grp_aesl_mux_load_28_35_s_fu_380_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_443_ce = 1'b1;
    end else begin
        grp_fu_443_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_01001 == 1'b0) & (ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 == 1'd1) & (1'b0 == ap_reg_ioackin_m_axi_out_r_AWREADY) & (1'b1 == ap_enable_reg_pp0_iter11))) begin
        m_axi_out_r_AWVALID = 1'b1;
    end else begin
        m_axi_out_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) & (1'b1 == ap_enable_reg_pp0_iter17))) begin
        m_axi_out_r_BREADY = 1'b1;
    end else begin
        m_axi_out_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'd1 == ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987) & (1'b0 == ap_reg_ioackin_m_axi_out_r_WREADY) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        m_axi_out_r_WVALID = 1'b1;
    end else begin
        m_axi_out_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_offset_blk_n = out_offset_empty_n;
    end else begin
        out_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_c_empty_n) | (1'b0 == curr_layer_out_h_c_empty_n) | (1'b0 == curr_layer_out_w_c_empty_n) | (1'b0 == ap_start) | (1'b0 == col_c_empty_n) | (1'b0 == row_c_empty_n) | (1'b0 == to_c_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_offset_read = 1'b1;
    end else begin
        out_offset_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 == 1'd1) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter11))) begin
        out_r_blk_n_AW = m_axi_out_r_AWREADY;
    end else begin
        out_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter17))) begin
        out_r_blk_n_B = m_axi_out_r_BVALID;
    end else begin
        out_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        out_r_blk_n_W = m_axi_out_r_WREADY;
    end else begin
        out_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_c_blk_n = row_c_empty_n;
    end else begin
        row_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_c_empty_n) | (1'b0 == curr_layer_out_h_c_empty_n) | (1'b0 == curr_layer_out_w_c_empty_n) | (1'b0 == ap_start) | (1'b0 == col_c_empty_n) | (1'b0 == row_c_empty_n) | (1'b0 == to_c_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_c_read = 1'b1;
    end else begin
        row_c_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        to_c_blk_n = to_c_empty_n;
    end else begin
        to_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_c_empty_n) | (1'b0 == curr_layer_out_h_c_empty_n) | (1'b0 == curr_layer_out_w_c_empty_n) | (1'b0 == ap_start) | (1'b0 == col_c_empty_n) | (1'b0 == row_c_empty_n) | (1'b0 == to_c_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        to_c_read = 1'b1;
    end else begin
        to_c_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_c_empty_n) | (1'b0 == curr_layer_out_h_c_empty_n) | (1'b0 == curr_layer_out_w_c_empty_n) | (1'b0 == ap_start) | (1'b0 == col_c_empty_n) | (1'b0 == row_c_empty_n) | (1'b0 == to_c_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'd0 == tmp_47_i_i_i_i_fu_604_p2) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) & ~((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter17)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'd0 == tmp_47_i_i_i_i_fu_604_p2) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter17)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'd1 == ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) & (1'b0 == m_axi_out_r_BVALID) & (1'b1 == ap_enable_reg_pp0_iter17));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'd1 == ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) & (1'b0 == m_axi_out_r_BVALID) & (1'b1 == ap_enable_reg_pp0_iter17)) | ((1'b1 == ap_block_state17_io) & (1'b1 == ap_enable_reg_pp0_iter12)) | ((1'b1 == ap_block_state16_io) & (1'b1 == ap_enable_reg_pp0_iter11)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'd1 == ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) & (1'b0 == m_axi_out_r_BVALID) & (1'b1 == ap_enable_reg_pp0_iter17)) | ((1'b1 == ap_block_state17_io) & (1'b1 == ap_enable_reg_pp0_iter12)) | ((1'b1 == ap_block_state16_io) & (1'b1 == ap_enable_reg_pp0_iter11)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_c_empty_n) | (1'b0 == curr_layer_out_h_c_empty_n) | (1'b0 == curr_layer_out_w_c_empty_n) | (1'b0 == ap_start) | (1'b0 == col_c_empty_n) | (1'b0 == row_c_empty_n) | (1'b0 == to_c_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 == 1'd1) & (1'b0 == ap_sig_ioackin_m_axi_out_r_AWREADY));
end

assign ap_block_state16_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((1'd1 == ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987) & (1'b0 == ap_sig_ioackin_m_axi_out_r_WREADY));
end

assign ap_block_state17_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp0_stage0_iter17 = ((1'd1 == ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) & (1'b0 == m_axi_out_r_BVALID));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign biasbuf_V_address0 = tmp_57_i_i_i_i_fu_740_p1;

assign dp_1_fu_843_p1 = p_Result_s_fu_831_p5;

assign exp_V_2_fu_825_p2 = ($signed(8'd214) + $signed(exp_V_fu_815_p4));

assign exp_V_fu_815_p4 = {{res_V_1_fu_812_p1[30:23]}};

assign grp_aesl_mux_load_28_35_s_fu_380_ap_start = ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start;

assign grp_fu_443_p0 = $signed(tmp_60_i_i_i_i_reg_1097);

assign i_2_i_i_i_i_fu_655_p3 = ((tmp_49_i_i_i_i_fu_615_p2[0:0] === 1'b1) ? sel_tmp9_i_i_fu_647_p3 : ap_phi_mux_i_i_i_i_i_phi_fu_351_p4);

assign i_fu_624_p2 = (32'd1 + ap_phi_mux_i_i_i_i_i_phi_fu_351_p4);

assign i_index_2_i_i_i_i_fu_719_p3 = ((ap_reg_pp0_iter1_tmp_49_i_i_i_i_reg_996[0:0] === 1'b1) ? sel_tmp1_i_i_fu_713_p3 : ap_phi_mux_i_index_i_i_i_i_phi_fu_316_p4);

assign i_index_fu_860_p0 = (16'd1 + tmp_reg_1002);

assign ii_2_fu_671_p3 = ((sel_tmp_i_i_fu_641_p2[0:0] === 1'b1) ? ii_fu_635_p2 : ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4);

assign ii_3_fu_679_p3 = ((tmp_49_i_i_i_i_fu_615_p2[0:0] === 1'b1) ? ii_2_fu_671_p3 : ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4);

assign ii_fu_635_p2 = (32'd1 + ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4);

assign ii_index_1_fu_726_p3 = ((ap_reg_pp0_iter1_sel_tmp_i_i_reg_1012[0:0] === 1'b1) ? ii_index_fu_710_p1 : ap_phi_mux_ii_index_i_i_i_i_phi_fu_328_p4);

assign ii_index_2_fu_733_p3 = ((ap_reg_pp0_iter1_tmp_49_i_i_i_i_reg_996[0:0] === 1'b1) ? ii_index_1_fu_726_p3 : ap_phi_mux_ii_index_i_i_i_i_phi_fu_328_p4);

assign ii_index_fu_710_p1 = tmp_53_i_i_i_i_reg_1051[15:0];

assign itr_i_i_cast_i_i_fu_600_p1 = itr_i_i_i_i_reg_336;

assign itr_i_i_fu_609_p2 = (itr_i_i_i_i_reg_336 + 31'd1);

assign j_2_i_i_i_i_fu_663_p3 = ((tmp_49_i_i_i_i_fu_615_p2[0:0] === 1'b1) ? 32'd0 : j_i_i_i_i_reg_358);

assign j_fu_691_p2 = (32'd1 + j_2_i_i_i_i_fu_663_p3);

assign m_axi_out_r_ARADDR = 32'd0;

assign m_axi_out_r_ARBURST = 2'd0;

assign m_axi_out_r_ARCACHE = 4'd0;

assign m_axi_out_r_ARID = 1'd0;

assign m_axi_out_r_ARLEN = 32'd0;

assign m_axi_out_r_ARLOCK = 2'd0;

assign m_axi_out_r_ARPROT = 3'd0;

assign m_axi_out_r_ARQOS = 4'd0;

assign m_axi_out_r_ARREGION = 4'd0;

assign m_axi_out_r_ARSIZE = 3'd0;

assign m_axi_out_r_ARUSER = 1'd0;

assign m_axi_out_r_ARVALID = 1'b0;

assign m_axi_out_r_AWADDR = ap_reg_pp0_iter10_out_addr_reg_1091;

assign m_axi_out_r_AWBURST = 2'd0;

assign m_axi_out_r_AWCACHE = 4'd0;

assign m_axi_out_r_AWID = 1'd0;

assign m_axi_out_r_AWLEN = 32'd1;

assign m_axi_out_r_AWLOCK = 2'd0;

assign m_axi_out_r_AWPROT = 3'd0;

assign m_axi_out_r_AWQOS = 4'd0;

assign m_axi_out_r_AWREGION = 4'd0;

assign m_axi_out_r_AWSIZE = 3'd0;

assign m_axi_out_r_AWUSER = 1'd0;

assign m_axi_out_r_RREADY = 1'b0;

assign m_axi_out_r_WDATA = p_0_i_i_i_i_i_reg_1117;

assign m_axi_out_r_WID = 1'd0;

assign m_axi_out_r_WLAST = 1'b0;

assign m_axi_out_r_WSTRB = 4'd15;

assign m_axi_out_r_WUSER = 1'd0;

assign n_cols_1_fu_572_p3 = ((tmp_40_i_i_i_i_fu_563_p2[0:0] === 1'b1) ? tmp_41_i_i_i_i_fu_568_p2 : n_cols_cast_i_i_i_i_fu_554_p1);

assign n_cols_cast_i_i_i_i_fu_554_p1 = $signed(n_cols_fu_548_p3);

assign n_cols_fu_548_p3 = ((tmp_33_i_i_i_i_reg_935[0:0] === 1'b1) ? 16'd25 : curr_layer_out_w_c_r_reg_870);

assign n_depth_o_1_fu_532_p3 = ((tmp_43_i_i_i_i_fu_521_p2[0:0] === 1'b1) ? tmp_44_i_i_i_i_fu_527_p2 : n_depth_o_cast_i_i_i_fu_488_p1);

assign n_depth_o_cast_i_i_i_fu_488_p1 = $signed(n_depth_o_fu_482_p3);

assign n_depth_o_fu_482_p3 = ((tmp_34_i_i_i_i_reg_917[0:0] === 1'b1) ? 16'd28 : curr_layer_out_ch_c_s_reg_884);

assign n_rows_1_fu_508_p3 = ((tmp_37_i_i_i_i_fu_497_p2[0:0] === 1'b1) ? tmp_38_i_i_i_i_fu_503_p2 : n_rows_cast_i_i_i_i_fu_470_p1);

assign n_rows_cast_i_i_i_i_fu_470_p1 = $signed(n_rows_fu_464_p3);

assign n_rows_fu_464_p3 = ((tmp_32_i_i_i_i_reg_912[0:0] === 1'b1) ? 16'd35 : curr_layer_out_h_c_r_reg_878);

assign out_size_fu_854_p0 = tmp_i_i_i_i_20_fu_461_p1;

assign outputfm_V_0_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_address0;

assign outputfm_V_0_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_ce0;

assign outputfm_V_10_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_address0;

assign outputfm_V_10_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_ce0;

assign outputfm_V_11_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_address0;

assign outputfm_V_11_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_ce0;

assign outputfm_V_12_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_address0;

assign outputfm_V_12_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_ce0;

assign outputfm_V_13_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_address0;

assign outputfm_V_13_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_ce0;

assign outputfm_V_14_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_address0;

assign outputfm_V_14_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_ce0;

assign outputfm_V_15_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_address0;

assign outputfm_V_15_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_ce0;

assign outputfm_V_16_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_address0;

assign outputfm_V_16_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_ce0;

assign outputfm_V_17_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_address0;

assign outputfm_V_17_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_ce0;

assign outputfm_V_18_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_address0;

assign outputfm_V_18_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_ce0;

assign outputfm_V_19_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_address0;

assign outputfm_V_19_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_ce0;

assign outputfm_V_1_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_address0;

assign outputfm_V_1_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_ce0;

assign outputfm_V_20_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_address0;

assign outputfm_V_20_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_ce0;

assign outputfm_V_21_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_address0;

assign outputfm_V_21_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_ce0;

assign outputfm_V_22_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_address0;

assign outputfm_V_22_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_ce0;

assign outputfm_V_23_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_address0;

assign outputfm_V_23_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_ce0;

assign outputfm_V_24_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_address0;

assign outputfm_V_24_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_ce0;

assign outputfm_V_25_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_address0;

assign outputfm_V_25_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_ce0;

assign outputfm_V_26_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_address0;

assign outputfm_V_26_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_ce0;

assign outputfm_V_27_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_address0;

assign outputfm_V_27_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_ce0;

assign outputfm_V_2_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_address0;

assign outputfm_V_2_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_ce0;

assign outputfm_V_3_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_address0;

assign outputfm_V_3_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_ce0;

assign outputfm_V_4_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_address0;

assign outputfm_V_4_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_ce0;

assign outputfm_V_5_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_address0;

assign outputfm_V_5_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_ce0;

assign outputfm_V_6_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_address0;

assign outputfm_V_6_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_ce0;

assign outputfm_V_7_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_address0;

assign outputfm_V_7_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_ce0;

assign outputfm_V_8_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_address0;

assign outputfm_V_8_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_ce0;

assign outputfm_V_9_address0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_address0;

assign outputfm_V_9_ce0 = grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_ce0;

assign p_0_i_i_i_i_i_fu_847_p3 = ((ap_reg_pp0_iter10_tmp_61_i_i_i_i_reg_1102[0:0] === 1'b1) ? 32'd0 : dp_1_fu_843_p1);

assign p_Result_s_fu_831_p5 = {{res_V_1_fu_812_p1[31:31]}, {exp_V_2_fu_825_p2}, {res_V_1_fu_812_p1[22:0]}};

assign res_V_1_fu_812_p1 = dp_reg_1112;

assign sel_tmp1_i_i_fu_713_p3 = ((ap_reg_pp0_iter1_sel_tmp_i_i_reg_1012[0:0] === 1'b1) ? 16'd0 : i_index_reg_1046);

assign sel_tmp9_i_i_fu_647_p3 = ((sel_tmp_i_i_fu_641_p2[0:0] === 1'b1) ? 32'd0 : i_fu_624_p2);

assign sel_tmp_i_i_fu_641_p2 = (tmp_52_i_i_i_i_fu_630_p2 & tmp_49_i_i_i_i_fu_615_p2);

assign sext_cast_i_i_fu_597_p1 = out_offset_read_reg_865;

assign sum_cast_i_i_fu_780_p1 = $signed(sum_i_i_fu_775_p2);

assign sum_i_i_fu_775_p2 = ($signed(sext_cast_i_i_reg_982) + $signed(tmp_68_i_i_cast_i_i_fu_772_p1));

assign tmp1_i_i_fu_592_p2 = (tmp2_i_i_fu_588_p2 + col_c_read_reg_905);

assign tmp2_i_i_fu_588_p2 = (tmp_31_i_i_i_i_reg_956 + tmp_30_i_i_i_i_reg_951);

assign tmp3_i_i_fu_762_p2 = (ap_reg_pp0_iter1_j_2_i_i_i_i_reg_1024 + tmp4_cast_i_i_fu_758_p1);

assign tmp4_cast_i_i_fu_758_p1 = tmp4_i_i_fu_752_p2;

assign tmp4_i_i_fu_752_p2 = (tmp_62_i_i_cast_i_i_fu_744_p1 + tmp_63_i_i_cast_i_i_fu_748_p1);

assign tmp_30_i_i_i_i_fu_540_p2 = ($signed(to_c_read_reg_890) * $signed(out_size_reg_929));

assign tmp_31_i_i_i_i_fu_544_p1 = tmp_i_i_i_i_reg_922;

assign tmp_31_i_i_i_i_fu_544_p2 = ($signed(row_c_read_reg_898) * $signed(tmp_31_i_i_i_i_fu_544_p1));

assign tmp_32_i_i_i_i_fu_446_p2 = (($signed(curr_layer_out_h_c_dout) > $signed(16'd35)) ? 1'b1 : 1'b0);

assign tmp_33_i_i_i_i_fu_474_p2 = (($signed(curr_layer_out_w_c_r_reg_870) > $signed(16'd25)) ? 1'b1 : 1'b0);

assign tmp_34_i_i_i_i_fu_452_p2 = (($signed(curr_layer_out_ch_c_dout) > $signed(16'd28)) ? 1'b1 : 1'b0);

assign tmp_35_i_i_i_i_fu_479_p1 = $signed(curr_layer_out_ch_c_s_reg_884);

assign tmp_36_i_i_i_i_fu_492_p2 = ($signed(row_c_read_reg_898) + $signed(n_rows_cast_i_i_i_i_fu_470_p1));

assign tmp_37_i_i_i_i_fu_497_p2 = (($signed(tmp_36_i_i_i_i_fu_492_p2) > $signed(tmp_i_i_i_i_20_fu_461_p1)) ? 1'b1 : 1'b0);

assign tmp_38_fu_687_p1 = ii_3_fu_679_p3[4:0];

assign tmp_38_i_i_i_i_fu_503_p2 = ($signed(tmp_i_i_i_i_20_fu_461_p1) - $signed(row_c_read_reg_898));

assign tmp_39_i_i_i_i_fu_558_p2 = ($signed(col_c_read_reg_905) + $signed(n_cols_cast_i_i_i_i_fu_554_p1));

assign tmp_40_i_i_i_i_fu_563_p2 = (($signed(tmp_39_i_i_i_i_fu_558_p2) > $signed(tmp_i_i_i_i_reg_922)) ? 1'b1 : 1'b0);

assign tmp_41_i_i_i_i_fu_568_p2 = ($signed(tmp_i_i_i_i_reg_922) - $signed(col_c_read_reg_905));

assign tmp_42_i_i_i_i_fu_516_p2 = ($signed(to_c_read_reg_890) + $signed(n_depth_o_cast_i_i_i_fu_488_p1));

assign tmp_43_i_i_i_i_fu_521_p2 = (($signed(tmp_42_i_i_i_i_fu_516_p2) > $signed(tmp_35_i_i_i_i_fu_479_p1)) ? 1'b1 : 1'b0);

assign tmp_44_i_i_i_i_fu_527_p2 = ($signed(tmp_35_i_i_i_i_fu_479_p1) - $signed(to_c_read_reg_890));

assign tmp_46_i_i_i_i_fu_584_p2 = ($signed(tmp_i_i_reg_967) * $signed(n_cols_1_reg_961));

assign tmp_47_i_i_i_i_fu_604_p2 = (($signed(itr_i_i_cast_i_i_fu_600_p1) < $signed(tmp_46_i_i_i_i_reg_972)) ? 1'b1 : 1'b0);

assign tmp_49_i_i_i_i_fu_615_p2 = ((j_i_i_i_i_reg_358 == n_cols_1_reg_961) ? 1'b1 : 1'b0);

assign tmp_52_i_i_i_i_fu_630_p2 = ((i_fu_624_p2 == n_rows_1_reg_940) ? 1'b1 : 1'b0);

assign tmp_53_i_i_i_i_fu_702_p2 = ($signed(out_size_reg_929) * $signed(ii_reg_1007));

assign tmp_56_i_i_i_i_fu_706_p2 = ($signed(ii_3_reg_1030) + $signed(to_c_read_reg_890));

assign tmp_57_i_i_i_i_fu_740_p1 = $signed(tmp_56_i_i_i_i_reg_1056);

assign tmp_58_i_i_i_i_fu_790_p1 = $signed(p_Val2_s_reg_1081);

assign tmp_59_i_i_i_i_fu_793_p1 = $signed(p_Val2_1_reg_1086);

assign tmp_60_i_i_i_i_fu_796_p2 = ($signed(tmp_58_i_i_i_i_fu_790_p1) + $signed(tmp_59_i_i_i_i_fu_793_p1));

assign tmp_61_i_i_i_i_fu_802_p2 = ((tmp_60_i_i_i_i_fu_796_p2 == 49'd0) ? 1'b1 : 1'b0);

assign tmp_62_i_i_cast_i_i_fu_744_p1 = ii_index_2_fu_733_p3;

assign tmp_63_i_i_cast_i_i_fu_748_p1 = i_index_2_i_i_i_i_fu_719_p3;

assign tmp_67_i_i_i_i_fu_767_p2 = (tmp1_i_i_reg_977 + tmp3_i_i_fu_762_p2);

assign tmp_68_i_i_cast_i_i_fu_772_p1 = $signed(tmp_67_i_i_i_i_reg_1076);

assign tmp_fu_620_p1 = ap_phi_mux_i_i_i_i_i_phi_fu_351_p4[15:0];

assign tmp_i_i_fu_580_p2 = ($signed(n_rows_1_reg_940) * $signed(n_depth_o_1_reg_946));

assign tmp_i_i_i_i_20_fu_461_p1 = $signed(curr_layer_out_h_c_r_reg_878);

assign tmp_i_i_i_i_fu_458_p1 = curr_layer_out_w_c_r_reg_870;

always @ (posedge ap_clk) begin
    sext_cast_i_i_reg_982[32:30] <= 3'b000;
end

endmodule //write_output
