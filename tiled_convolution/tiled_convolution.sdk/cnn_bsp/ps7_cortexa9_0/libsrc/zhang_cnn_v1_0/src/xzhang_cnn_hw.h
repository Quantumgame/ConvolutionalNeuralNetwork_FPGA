// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

// control
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of image_r
//        bit 31~0 - image_r[31:0] (Read/Write)
// 0x14 : reserved
// 0x18 : Data signal of weights
//        bit 31~0 - weights[31:0] (Read/Write)
// 0x1c : reserved
// 0x20 : Data signal of out_r
//        bit 31~0 - out_r[31:0] (Read/Write)
// 0x24 : reserved
// 0x28 : Data signal of bias
//        bit 31~0 - bias[31:0] (Read/Write)
// 0x2c : reserved
// 0x30 : Data signal of curr_layer_in_n_layer
//        bit 15~0 - curr_layer_in_n_layer[15:0] (Read/Write)
//        others   - reserved
// 0x34 : reserved
// 0x38 : Data signal of curr_layer_in_in_w
//        bit 15~0 - curr_layer_in_in_w[15:0] (Read/Write)
//        others   - reserved
// 0x3c : reserved
// 0x40 : Data signal of curr_layer_in_in_h
//        bit 15~0 - curr_layer_in_in_h[15:0] (Read/Write)
//        others   - reserved
// 0x44 : reserved
// 0x48 : Data signal of curr_layer_in_out_w
//        bit 15~0 - curr_layer_in_out_w[15:0] (Read/Write)
//        others   - reserved
// 0x4c : reserved
// 0x50 : Data signal of curr_layer_in_out_h
//        bit 15~0 - curr_layer_in_out_h[15:0] (Read/Write)
//        others   - reserved
// 0x54 : reserved
// 0x58 : Data signal of curr_layer_in_in_ch
//        bit 15~0 - curr_layer_in_in_ch[15:0] (Read/Write)
//        others   - reserved
// 0x5c : reserved
// 0x60 : Data signal of curr_layer_in_out_ch
//        bit 15~0 - curr_layer_in_out_ch[15:0] (Read/Write)
//        others   - reserved
// 0x64 : reserved
// 0x68 : Data signal of curr_layer_in_ker_w
//        bit 15~0 - curr_layer_in_ker_w[15:0] (Read/Write)
//        others   - reserved
// 0x6c : reserved
// 0x70 : Data signal of curr_layer_in_ker_h
//        bit 15~0 - curr_layer_in_ker_h[15:0] (Read/Write)
//        others   - reserved
// 0x74 : reserved
// 0x78 : Data signal of curr_layer_in_ker_ch
//        bit 15~0 - curr_layer_in_ker_ch[15:0] (Read/Write)
//        others   - reserved
// 0x7c : reserved
// 0x80 : Data signal of curr_layer_in_str_w
//        bit 15~0 - curr_layer_in_str_w[15:0] (Read/Write)
//        others   - reserved
// 0x84 : reserved
// 0x88 : Data signal of curr_layer_in_str_h
//        bit 15~0 - curr_layer_in_str_h[15:0] (Read/Write)
//        others   - reserved
// 0x8c : reserved
// 0x90 : Data signal of curr_layer_in_pad_w
//        bit 15~0 - curr_layer_in_pad_w[15:0] (Read/Write)
//        others   - reserved
// 0x94 : reserved
// 0x98 : Data signal of curr_layer_in_pad_h
//        bit 15~0 - curr_layer_in_pad_h[15:0] (Read/Write)
//        others   - reserved
// 0x9c : reserved
// 0xa0 : Data signal of curr_layer_in_relu
//        bit 15~0 - curr_layer_in_relu[15:0] (Read/Write)
//        others   - reserved
// 0xa4 : reserved
// 0xa8 : Data signal of curr_layer_in_has_bias
//        bit 15~0 - curr_layer_in_has_bias[15:0] (Read/Write)
//        others   - reserved
// 0xac : reserved
// 0xb0 : Data signal of curr_layer_in_act_type
//        bit 3~0 - curr_layer_in_act_type[3:0] (Read/Write)
//        others  - reserved
// 0xb4 : reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

#define XZHANG_CNN_CONTROL_ADDR_AP_CTRL                     0x00
#define XZHANG_CNN_CONTROL_ADDR_GIE                         0x04
#define XZHANG_CNN_CONTROL_ADDR_IER                         0x08
#define XZHANG_CNN_CONTROL_ADDR_ISR                         0x0c
#define XZHANG_CNN_CONTROL_ADDR_IMAGE_R_DATA                0x10
#define XZHANG_CNN_CONTROL_BITS_IMAGE_R_DATA                32
#define XZHANG_CNN_CONTROL_ADDR_WEIGHTS_DATA                0x18
#define XZHANG_CNN_CONTROL_BITS_WEIGHTS_DATA                32
#define XZHANG_CNN_CONTROL_ADDR_OUT_R_DATA                  0x20
#define XZHANG_CNN_CONTROL_BITS_OUT_R_DATA                  32
#define XZHANG_CNN_CONTROL_ADDR_BIAS_DATA                   0x28
#define XZHANG_CNN_CONTROL_BITS_BIAS_DATA                   32
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_N_LAYER_DATA  0x30
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_N_LAYER_DATA  16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_IN_W_DATA     0x38
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_IN_W_DATA     16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_IN_H_DATA     0x40
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_IN_H_DATA     16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_OUT_W_DATA    0x48
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_OUT_W_DATA    16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_OUT_H_DATA    0x50
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_OUT_H_DATA    16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_IN_CH_DATA    0x58
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_IN_CH_DATA    16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_OUT_CH_DATA   0x60
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_OUT_CH_DATA   16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_KER_W_DATA    0x68
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_KER_W_DATA    16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_KER_H_DATA    0x70
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_KER_H_DATA    16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_KER_CH_DATA   0x78
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_KER_CH_DATA   16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_STR_W_DATA    0x80
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_STR_W_DATA    16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_STR_H_DATA    0x88
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_STR_H_DATA    16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_PAD_W_DATA    0x90
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_PAD_W_DATA    16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_PAD_H_DATA    0x98
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_PAD_H_DATA    16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_RELU_DATA     0xa0
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_RELU_DATA     16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_HAS_BIAS_DATA 0xa8
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_HAS_BIAS_DATA 16
#define XZHANG_CNN_CONTROL_ADDR_CURR_LAYER_IN_ACT_TYPE_DATA 0xb0
#define XZHANG_CNN_CONTROL_BITS_CURR_LAYER_IN_ACT_TYPE_DATA 4

