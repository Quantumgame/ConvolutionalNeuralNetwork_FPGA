-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity read_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_input_r_AWVALID : OUT STD_LOGIC;
    m_axi_input_r_AWREADY : IN STD_LOGIC;
    m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_WVALID : OUT STD_LOGIC;
    m_axi_input_r_WREADY : IN STD_LOGIC;
    m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_WLAST : OUT STD_LOGIC;
    m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_ARVALID : OUT STD_LOGIC;
    m_axi_input_r_ARREADY : IN STD_LOGIC;
    m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RVALID : IN STD_LOGIC;
    m_axi_input_r_RREADY : OUT STD_LOGIC;
    m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_RLAST : IN STD_LOGIC;
    m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BVALID : IN STD_LOGIC;
    m_axi_input_r_BREADY : OUT STD_LOGIC;
    m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    curr_layer_in_w : IN STD_LOGIC_VECTOR (15 downto 0);
    curr_layer_in_h : IN STD_LOGIC_VECTOR (15 downto 0);
    curr_layer_in_ch : IN STD_LOGIC_VECTOR (15 downto 0);
    curr_layer_ker_w : IN STD_LOGIC_VECTOR (15 downto 0);
    curr_layer_ker_h : IN STD_LOGIC_VECTOR (15 downto 0);
    curr_layer_str_w : IN STD_LOGIC_VECTOR (15 downto 0);
    curr_layer_str_h : IN STD_LOGIC_VECTOR (15 downto 0);
    ti : IN STD_LOGIC_VECTOR (31 downto 0);
    row : IN STD_LOGIC_VECTOR (31 downto 0);
    col : IN STD_LOGIC_VECTOR (31 downto 0);
    inputfm_0_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputfm_0_V_ce0 : OUT STD_LOGIC;
    inputfm_0_V_we0 : OUT STD_LOGIC;
    inputfm_0_V_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    inputfm_1_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputfm_1_V_ce0 : OUT STD_LOGIC;
    inputfm_1_V_we0 : OUT STD_LOGIC;
    inputfm_1_V_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    inputfm_2_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputfm_2_V_ce0 : OUT STD_LOGIC;
    inputfm_2_V_we0 : OUT STD_LOGIC;
    inputfm_2_V_d0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of read_input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_14 : STD_LOGIC_VECTOR (11 downto 0) := "000000010100";
    constant ap_const_lv12_FEC : STD_LOGIC_VECTOR (11 downto 0) := "111111101100";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_19 : STD_LOGIC_VECTOR (11 downto 0) := "000000011001";
    constant ap_const_lv25_1FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111111111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv11_1B : STD_LOGIC_VECTOR (10 downto 0) := "00000011011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_r_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_r_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter9_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_i_reg_258 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_jj_reg_270 : STD_LOGIC_VECTOR (15 downto 0);
    signal itr_reg_282 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cols_fu_379_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal n_cols_reg_1094 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1099 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_reg_1120 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_reg_1131 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_rows_fu_489_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal n_rows_reg_1141 : STD_LOGIC_VECTOR (21 downto 0);
    signal n_cols_2_fu_531_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cols_2_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_1_fu_557_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_1_reg_1152 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_rows_2_fu_582_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_rows_2_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp37_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp37_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1168 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_reg_1173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp1_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_1178 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp38_fu_1056_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp38_reg_1183 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_cast_fu_606_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_reg_1188 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_92_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_input_r_ARREADY : STD_LOGIC;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_tmp_92_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal itr_2_fu_619_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_93_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_reg_1202 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_i_3_fu_1060_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_i_3_reg_1208 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_jj_3_fu_1065_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_jj_3_reg_1213 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_1218 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_2_fu_705_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_2_reg_1229 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_fu_713_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_99_reg_1234 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_100_fu_717_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_100_reg_1239 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp39_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp39_reg_1244 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_122_fu_726_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter1_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter2_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter3_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter4_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter5_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter6_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter7_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter8_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter9_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter10_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter11_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter12_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter13_tmp_122_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_fu_730_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_i_2_fu_742_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_i_2_reg_1258 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal index_jj_2_fu_755_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_jj_2_reg_1263 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1070_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter2_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter3_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter4_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter5_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter6_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter7_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter8_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter9_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter10_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter11_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter12_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter13_tmp_109_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_101_fu_785_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_reg_1273 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_addr_reg_1278 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_addr_read_reg_1284 : STD_LOGIC_VECTOR (31 downto 0);
    signal isneg_reg_1289 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_isneg_reg_1289 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_reg_1295 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_118_fu_834_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_118_reg_1300 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_104_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_tmp_104_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_6_fu_864_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_6_reg_1311 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_105_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_reg_1316 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_895_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1322 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_108_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_reg_1329 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_fu_909_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_119_reg_1335 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_reg_pp0_iter13_tmp_119_reg_1335 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_amt_cast_fu_913_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_amt_cast_reg_1341 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp30_fu_1004_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sel_tmp30_reg_1346 : STD_LOGIC_VECTOR (24 downto 0);
    signal sel_tmp32_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp32_reg_1351 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_phi_mux_index_i_phi_fu_262_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_index_jj_phi_fu_274_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_i_phi_fu_297_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_jj_phi_fu_319_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_cast1_fu_1029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_input_r_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal storemerge3_fu_1047_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_cast_fu_329_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_fu_333_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl1_fu_345_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl_cast_fu_341_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl1_cast_fu_353_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_77_fu_357_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_130_cast_fu_363_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_78_fu_367_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_cast_fu_329_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_79_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_fu_387_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_403_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_69_fu_406_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_119_cast_fu_410_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_70_fu_414_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_fu_414_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_72_fu_424_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_424_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_74_fu_433_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_fu_433_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_fu_439_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl3_fu_451_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl3_cast_cast_fu_459_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_126_cast_cast_fu_463_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp36_fu_467_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp44_cast_fu_473_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl2_cast_fu_447_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_75_fu_477_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_119_cast_fu_410_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_76_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_depth_fu_503_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_85_fu_513_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cols_cast_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_fu_513_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_525_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_525_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_fu_539_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_cast_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_551_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_fu_568_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_rows_cast_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal itr_cast_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_fu_630_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_fu_634_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_fu_651_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_96_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_673_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_3_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_4_fu_697_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_689_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_736_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_jj_4_fu_749_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_113_cast_fu_762_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_114_cast_fu_766_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp40_fu_770_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp49_cast_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp41_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_cast_fu_790_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_fu_793_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal d_assign_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_fu_812_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_67_fu_847_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_s_fu_854_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_5_fu_858_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_103_fu_844_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_871_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_106_fu_883_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_107_fu_889_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_112_fu_926_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_113_fu_930_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sel_tmp21_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp22_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp26_demorgan_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp24_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp25_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp26_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp27_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_fu_939_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sel_tmp23_fu_956_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sel_tmp29_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_fu_935_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sel_tmp28_fu_990_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sel_tmp41_demorgan_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_111_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp31_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_115_fu_1035_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_116_fu_1038_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_121_fu_1043_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal index_i_3_fu_1060_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_jj_3_fu_1065_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1070_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component zhang_cnn_fpext_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component zhang_cnn_mul_mulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component zhang_cnn_mac_muldEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    zhang_cnn_fpext_3bkb_U1 : component zhang_cnn_fpext_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => input_addr_read_reg_1284,
        dout => d_assign_fu_326_p1);

    zhang_cnn_mul_mulcud_U2 : component zhang_cnn_mul_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => curr_layer_in_h,
        din1 => curr_layer_in_w,
        dout => tmp38_fu_1056_p2);

    zhang_cnn_mul_mulcud_U3 : component zhang_cnn_mul_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => curr_layer_in_w,
        din1 => index_i_3_fu_1060_p1,
        dout => index_i_3_fu_1060_p2);

    zhang_cnn_mul_mulcud_U4 : component zhang_cnn_mul_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => index_jj_3_fu_1065_p0,
        din1 => tmp38_reg_1183,
        dout => index_jj_3_fu_1065_p2);

    zhang_cnn_mac_muldEe_U5 : component zhang_cnn_mac_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1070_p0,
        din1 => tmp_100_reg_1239,
        din2 => tmp_99_reg_1234,
        dout => grp_fu_1070_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state5 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_input_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_input_r_ARREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_reg_pp0_iter2_tmp_92_reg_1193 = ap_const_lv1_1))) then
                    if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_input_r_ARREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_1 = m_axi_input_r_ARREADY))) then 
                        ap_reg_ioackin_m_axi_input_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_92_reg_1193 = ap_const_lv1_1))) then 
                i_reg_293 <= i_2_reg_1224;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_293 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    index_i_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_92_reg_1193))) then 
                index_i_reg_258 <= index_i_2_reg_1258;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                index_i_reg_258 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    index_jj_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_92_reg_1193))) then 
                index_jj_reg_270 <= index_jj_2_reg_1263;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                index_jj_reg_270 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    itr_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = tmp_92_fu_614_p2))) then 
                itr_reg_282 <= itr_2_fu_619_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                itr_reg_282 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = tmp_92_fu_614_p2))) then 
                j_reg_304 <= j_3_fu_730_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_304 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    jj_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_92_reg_1193 = ap_const_lv1_1))) then 
                jj_reg_315 <= jj_2_reg_1229;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                jj_reg_315 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_tmp_109_reg_1268 <= ap_reg_pp0_iter9_tmp_109_reg_1268;
                ap_reg_pp0_iter10_tmp_122_reg_1249 <= ap_reg_pp0_iter9_tmp_122_reg_1249;
                ap_reg_pp0_iter10_tmp_92_reg_1193 <= ap_reg_pp0_iter9_tmp_92_reg_1193;
                ap_reg_pp0_iter11_tmp_109_reg_1268 <= ap_reg_pp0_iter10_tmp_109_reg_1268;
                ap_reg_pp0_iter11_tmp_122_reg_1249 <= ap_reg_pp0_iter10_tmp_122_reg_1249;
                ap_reg_pp0_iter11_tmp_92_reg_1193 <= ap_reg_pp0_iter10_tmp_92_reg_1193;
                ap_reg_pp0_iter12_isneg_reg_1289 <= isneg_reg_1289;
                ap_reg_pp0_iter12_tmp_104_reg_1305 <= tmp_104_reg_1305;
                ap_reg_pp0_iter12_tmp_109_reg_1268 <= ap_reg_pp0_iter11_tmp_109_reg_1268;
                ap_reg_pp0_iter12_tmp_122_reg_1249 <= ap_reg_pp0_iter11_tmp_122_reg_1249;
                ap_reg_pp0_iter12_tmp_92_reg_1193 <= ap_reg_pp0_iter11_tmp_92_reg_1193;
                ap_reg_pp0_iter13_tmp_109_reg_1268 <= ap_reg_pp0_iter12_tmp_109_reg_1268;
                ap_reg_pp0_iter13_tmp_119_reg_1335 <= tmp_119_reg_1335;
                ap_reg_pp0_iter13_tmp_122_reg_1249 <= ap_reg_pp0_iter12_tmp_122_reg_1249;
                ap_reg_pp0_iter2_tmp_109_reg_1268 <= tmp_109_reg_1268;
                ap_reg_pp0_iter2_tmp_122_reg_1249 <= ap_reg_pp0_iter1_tmp_122_reg_1249;
                ap_reg_pp0_iter2_tmp_92_reg_1193 <= ap_reg_pp0_iter1_tmp_92_reg_1193;
                ap_reg_pp0_iter3_tmp_109_reg_1268 <= ap_reg_pp0_iter2_tmp_109_reg_1268;
                ap_reg_pp0_iter3_tmp_122_reg_1249 <= ap_reg_pp0_iter2_tmp_122_reg_1249;
                ap_reg_pp0_iter3_tmp_92_reg_1193 <= ap_reg_pp0_iter2_tmp_92_reg_1193;
                ap_reg_pp0_iter4_tmp_109_reg_1268 <= ap_reg_pp0_iter3_tmp_109_reg_1268;
                ap_reg_pp0_iter4_tmp_122_reg_1249 <= ap_reg_pp0_iter3_tmp_122_reg_1249;
                ap_reg_pp0_iter4_tmp_92_reg_1193 <= ap_reg_pp0_iter3_tmp_92_reg_1193;
                ap_reg_pp0_iter5_tmp_109_reg_1268 <= ap_reg_pp0_iter4_tmp_109_reg_1268;
                ap_reg_pp0_iter5_tmp_122_reg_1249 <= ap_reg_pp0_iter4_tmp_122_reg_1249;
                ap_reg_pp0_iter5_tmp_92_reg_1193 <= ap_reg_pp0_iter4_tmp_92_reg_1193;
                ap_reg_pp0_iter6_tmp_109_reg_1268 <= ap_reg_pp0_iter5_tmp_109_reg_1268;
                ap_reg_pp0_iter6_tmp_122_reg_1249 <= ap_reg_pp0_iter5_tmp_122_reg_1249;
                ap_reg_pp0_iter6_tmp_92_reg_1193 <= ap_reg_pp0_iter5_tmp_92_reg_1193;
                ap_reg_pp0_iter7_tmp_109_reg_1268 <= ap_reg_pp0_iter6_tmp_109_reg_1268;
                ap_reg_pp0_iter7_tmp_122_reg_1249 <= ap_reg_pp0_iter6_tmp_122_reg_1249;
                ap_reg_pp0_iter7_tmp_92_reg_1193 <= ap_reg_pp0_iter6_tmp_92_reg_1193;
                ap_reg_pp0_iter8_tmp_109_reg_1268 <= ap_reg_pp0_iter7_tmp_109_reg_1268;
                ap_reg_pp0_iter8_tmp_122_reg_1249 <= ap_reg_pp0_iter7_tmp_122_reg_1249;
                ap_reg_pp0_iter8_tmp_92_reg_1193 <= ap_reg_pp0_iter7_tmp_92_reg_1193;
                ap_reg_pp0_iter9_tmp_109_reg_1268 <= ap_reg_pp0_iter8_tmp_109_reg_1268;
                ap_reg_pp0_iter9_tmp_122_reg_1249 <= ap_reg_pp0_iter8_tmp_122_reg_1249;
                ap_reg_pp0_iter9_tmp_92_reg_1193 <= ap_reg_pp0_iter8_tmp_92_reg_1193;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_tmp_122_reg_1249 <= tmp_122_reg_1249;
                ap_reg_pp0_iter1_tmp_92_reg_1193 <= tmp_92_reg_1193;
                tmp_92_reg_1193 <= tmp_92_fu_614_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter10_tmp_92_reg_1193))) then
                exp_tmp_V_reg_1295 <= ireg_V_fu_808_p1(62 downto 52);
                isneg_reg_1289 <= ireg_V_fu_808_p1(63 downto 63);
                tmp_104_reg_1305 <= tmp_104_fu_838_p2;
                tmp_118_reg_1300 <= tmp_118_fu_834_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = tmp_92_fu_614_p2))) then
                i_2_reg_1224 <= i_2_fu_681_p3;
                jj_2_reg_1229 <= jj_2_fu_705_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_reg_1099 <= icmp_fu_397_p2;
                n_cols_reg_1094 <= n_cols_fu_379_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_92_reg_1193 = ap_const_lv1_1))) then
                index_i_2_reg_1258 <= index_i_2_fu_742_p3;
                index_jj_2_reg_1263 <= index_jj_2_fu_755_p3;
                tmp_109_reg_1268 <= grp_fu_1070_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = tmp_92_fu_614_p2))) then
                index_i_3_reg_1208 <= index_i_3_fu_1060_p2;
                index_jj_3_reg_1213 <= index_jj_3_fu_1065_p2;
                sel_tmp_reg_1218 <= sel_tmp_fu_667_p2;
                tmp39_reg_1244 <= tmp39_fu_721_p2;
                tmp_100_reg_1239 <= tmp_100_fu_717_p1;
                tmp_122_reg_1249 <= tmp_122_fu_726_p1;
                tmp_93_reg_1202 <= tmp_93_fu_625_p2;
                tmp_99_reg_1234 <= tmp_99_fu_713_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter9_tmp_92_reg_1193))) then
                input_addr_read_reg_1284 <= m_axi_input_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_92_reg_1193))) then
                input_addr_reg_1278 <= sum_cast_fu_798_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter11_tmp_92_reg_1193))) then
                man_V_6_reg_1311 <= man_V_6_fu_864_p3;
                sh_amt_reg_1322 <= sh_amt_fu_895_p3;
                tmp_105_reg_1316 <= tmp_105_fu_877_p2;
                tmp_108_reg_1329 <= tmp_108_fu_903_p2;
                tmp_119_reg_1335 <= tmp_119_fu_909_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_cols_2_reg_1146 <= n_cols_2_fu_531_p3;
                n_depth_1_reg_1152 <= n_depth_1_fu_557_p3;
                n_rows_reg_1141 <= n_rows_fu_489_p3;
                tmp_69_reg_1120 <= tmp_69_fu_406_p1;
                tmp_70_reg_1126 <= tmp_70_fu_414_p2;
                tmp_72_reg_1131 <= tmp_72_fu_424_p2;
                tmp_74_reg_1136 <= tmp_74_fu_433_p2;
                tmp_s_reg_1115 <= tmp_s_fu_403_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                n_rows_2_reg_1157 <= n_rows_2_fu_582_p3;
                tmp37_reg_1163 <= tmp37_fu_590_p2;
                tmp_reg_1168 <= tmp_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter12_tmp_92_reg_1193))) then
                sel_tmp30_reg_1346 <= sel_tmp30_fu_1004_p3;
                sel_tmp32_reg_1351 <= sel_tmp32_fu_1023_p2;
                sh_amt_cast_reg_1341 <= sh_amt_cast_fu_913_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    sext_cast_reg_1188(29 downto 0) <= sext_cast_fu_606_p1(29 downto 0);
                tmp1_reg_1178 <= tmp1_fu_602_p2;
                tmp38_reg_1183 <= tmp38_fu_1056_p2;
                tmp_91_reg_1173 <= tmp_91_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_92_reg_1193 = ap_const_lv1_1))) then
                tmp_101_reg_1273 <= tmp_101_fu_785_p2;
            end if;
        end if;
    end process;
    sext_cast_reg_1188(32 downto 30) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_92_fu_614_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_lv1_0 = tmp_92_fu_614_p2) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and not(((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14)) or ((ap_const_lv1_0 = tmp_92_fu_614_p2) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    F2_fu_871_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_103_fu_844_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(5);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_input_r_RVALID, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_92_reg_1193)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = m_axi_input_r_RVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_lv1_1 = ap_reg_pp0_iter9_tmp_92_reg_1193));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_input_r_RVALID, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_92_reg_1193, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_0 = m_axi_input_r_RVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_lv1_1 = ap_reg_pp0_iter9_tmp_92_reg_1193)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_boolean_1 = ap_block_state8_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_input_r_RVALID, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_92_reg_1193, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_0 = m_axi_input_r_RVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_lv1_1 = ap_reg_pp0_iter9_tmp_92_reg_1193)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_boolean_1 = ap_block_state8_io)));
    end process;

        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp0_stage0_iter10_assign_proc : process(m_axi_input_r_RVALID, ap_reg_pp0_iter9_tmp_92_reg_1193)
    begin
                ap_block_state15_pp0_stage0_iter10 <= ((ap_const_logic_0 = m_axi_input_r_RVALID) and (ap_const_lv1_1 = ap_reg_pp0_iter9_tmp_92_reg_1193));
    end process;

        ap_block_state16_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(ap_reg_pp0_iter2_tmp_92_reg_1193, ap_sig_ioackin_m_axi_input_r_ARREADY)
    begin
                ap_block_state8_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_input_r_ARREADY) and (ap_reg_pp0_iter2_tmp_92_reg_1193 = ap_const_lv1_1));
    end process;

        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(tmp_92_fu_614_p2)
    begin
        if ((ap_const_lv1_0 = tmp_92_fu_614_p2)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_297_p4_assign_proc : process(ap_block_pp0_stage0, tmp_92_reg_1193, i_reg_293, ap_CS_fsm_pp0_stage0, i_2_reg_1224, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_92_reg_1193 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            ap_phi_mux_i_phi_fu_297_p4 <= i_2_reg_1224;
        else 
            ap_phi_mux_i_phi_fu_297_p4 <= i_reg_293;
        end if; 
    end process;


    ap_phi_mux_index_i_phi_fu_262_p4_assign_proc : process(ap_block_pp0_stage0, index_i_reg_258, ap_reg_pp0_iter1_tmp_92_reg_1193, index_i_2_reg_1258, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_92_reg_1193) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            ap_phi_mux_index_i_phi_fu_262_p4 <= index_i_2_reg_1258;
        else 
            ap_phi_mux_index_i_phi_fu_262_p4 <= index_i_reg_258;
        end if; 
    end process;


    ap_phi_mux_index_jj_phi_fu_274_p4_assign_proc : process(ap_block_pp0_stage0, index_jj_reg_270, ap_reg_pp0_iter1_tmp_92_reg_1193, index_jj_2_reg_1263, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_92_reg_1193) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            ap_phi_mux_index_jj_phi_fu_274_p4 <= index_jj_2_reg_1263;
        else 
            ap_phi_mux_index_jj_phi_fu_274_p4 <= index_jj_reg_270;
        end if; 
    end process;


    ap_phi_mux_jj_phi_fu_319_p4_assign_proc : process(ap_block_pp0_stage0, tmp_92_reg_1193, jj_reg_315, ap_CS_fsm_pp0_stage0, jj_2_reg_1229, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_92_reg_1193 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            ap_phi_mux_jj_phi_fu_319_p4 <= jj_2_reg_1229;
        else 
            ap_phi_mux_jj_phi_fu_319_p4 <= jj_reg_315;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_input_r_ARREADY_assign_proc : process(m_axi_input_r_ARREADY, ap_reg_ioackin_m_axi_input_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_input_r_ARREADY)) then 
            ap_sig_ioackin_m_axi_input_r_ARREADY <= m_axi_input_r_ARREADY;
        else 
            ap_sig_ioackin_m_axi_input_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1070_p0 <= ap_const_lv11_1B(6 - 1 downto 0);
    i_2_fu_681_p3 <= 
        sel_tmp9_fu_673_p3 when (tmp_93_fu_625_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_297_p4;
    i_3_fu_634_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i_phi_fu_297_p4));
    icmp_fu_397_p2 <= "1" when (signed(tmp_80_fu_387_p4) > signed(ap_const_lv14_0)) else "0";
    index_i_2_fu_742_p3 <= 
        sel_tmp1_fu_736_p3 when (tmp_93_reg_1202(0) = '1') else 
        ap_phi_mux_index_i_phi_fu_262_p4;
    index_i_3_fu_1060_p1 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_94_fu_630_p1));
    index_jj_2_fu_755_p3 <= 
        index_jj_4_fu_749_p3 when (tmp_93_reg_1202(0) = '1') else 
        ap_phi_mux_index_jj_phi_fu_274_p4;
    index_jj_3_fu_1065_p0 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_97_fu_651_p1));
    index_jj_4_fu_749_p3 <= 
        index_jj_3_reg_1213 when (sel_tmp_reg_1218(0) = '1') else 
        ap_phi_mux_index_jj_phi_fu_274_p4;

    input_r_blk_n_AR_assign_proc : process(m_axi_input_r_ARREADY, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_reg_pp0_iter2_tmp_92_reg_1193)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_reg_pp0_iter2_tmp_92_reg_1193 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            input_r_blk_n_AR <= m_axi_input_r_ARREADY;
        else 
            input_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    input_r_blk_n_R_assign_proc : process(m_axi_input_r_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_92_reg_1193)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_lv1_1 = ap_reg_pp0_iter9_tmp_92_reg_1193) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            input_r_blk_n_R <= m_axi_input_r_RVALID;
        else 
            input_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    inputfm_0_V_address0 <= tmp_119_cast1_fu_1029_p1(10 - 1 downto 0);

    inputfm_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14))) then 
            inputfm_0_V_ce0 <= ap_const_logic_1;
        else 
            inputfm_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputfm_0_V_d0 <= storemerge3_fu_1047_p3;

    inputfm_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter13_tmp_122_reg_1249, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_const_lv2_0 = ap_reg_pp0_iter13_tmp_122_reg_1249) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14))) then 
            inputfm_0_V_we0 <= ap_const_logic_1;
        else 
            inputfm_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    inputfm_1_V_address0 <= tmp_119_cast1_fu_1029_p1(10 - 1 downto 0);

    inputfm_1_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14))) then 
            inputfm_1_V_ce0 <= ap_const_logic_1;
        else 
            inputfm_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputfm_1_V_d0 <= storemerge3_fu_1047_p3;

    inputfm_1_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter13_tmp_122_reg_1249, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_reg_pp0_iter13_tmp_122_reg_1249 = ap_const_lv2_1) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14))) then 
            inputfm_1_V_we0 <= ap_const_logic_1;
        else 
            inputfm_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    inputfm_2_V_address0 <= tmp_119_cast1_fu_1029_p1(10 - 1 downto 0);

    inputfm_2_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14))) then 
            inputfm_2_V_ce0 <= ap_const_logic_1;
        else 
            inputfm_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputfm_2_V_d0 <= storemerge3_fu_1047_p3;

    inputfm_2_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter13_tmp_122_reg_1249, ap_enable_reg_pp0_iter14)
    begin
        if ((not((ap_const_lv2_0 = ap_reg_pp0_iter13_tmp_122_reg_1249)) and not((ap_reg_pp0_iter13_tmp_122_reg_1249 = ap_const_lv2_1)) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14))) then 
            inputfm_2_V_we0 <= ap_const_logic_1;
        else 
            inputfm_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_808_p1 <= d_assign_fu_326_p1;
    itr_2_fu_619_p2 <= std_logic_vector(unsigned(itr_reg_282) + unsigned(ap_const_lv31_1));
    itr_cast_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(itr_reg_282),32));
    j_2_fu_689_p3 <= 
        ap_const_lv32_0 when (tmp_93_fu_625_p2(0) = '1') else 
        j_reg_304;
    j_3_fu_730_p2 <= std_logic_vector(unsigned(j_2_fu_689_p3) + unsigned(ap_const_lv32_1));
    jj_2_fu_705_p3 <= 
        jj_4_fu_697_p3 when (tmp_93_fu_625_p2(0) = '1') else 
        ap_phi_mux_jj_phi_fu_319_p4;
    jj_3_fu_655_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_jj_phi_fu_319_p4));
    jj_4_fu_697_p3 <= 
        jj_3_fu_655_p2 when (sel_tmp_fu_667_p2(0) = '1') else 
        ap_phi_mux_jj_phi_fu_319_p4;
    m_axi_input_r_ARADDR <= input_addr_reg_1278;
    m_axi_input_r_ARBURST <= ap_const_lv2_0;
    m_axi_input_r_ARCACHE <= ap_const_lv4_0;
    m_axi_input_r_ARID <= ap_const_lv1_0;
    m_axi_input_r_ARLEN <= ap_const_lv32_1;
    m_axi_input_r_ARLOCK <= ap_const_lv2_0;
    m_axi_input_r_ARPROT <= ap_const_lv3_0;
    m_axi_input_r_ARQOS <= ap_const_lv4_0;
    m_axi_input_r_ARREGION <= ap_const_lv4_0;
    m_axi_input_r_ARSIZE <= ap_const_lv3_0;
    m_axi_input_r_ARUSER <= ap_const_lv1_0;

    m_axi_input_r_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_tmp_92_reg_1193, ap_reg_ioackin_m_axi_input_r_ARREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_input_r_ARREADY) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_reg_pp0_iter2_tmp_92_reg_1193 = ap_const_lv1_1))) then 
            m_axi_input_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_input_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_r_AWADDR <= ap_const_lv32_0;
    m_axi_input_r_AWBURST <= ap_const_lv2_0;
    m_axi_input_r_AWCACHE <= ap_const_lv4_0;
    m_axi_input_r_AWID <= ap_const_lv1_0;
    m_axi_input_r_AWLEN <= ap_const_lv32_0;
    m_axi_input_r_AWLOCK <= ap_const_lv2_0;
    m_axi_input_r_AWPROT <= ap_const_lv3_0;
    m_axi_input_r_AWQOS <= ap_const_lv4_0;
    m_axi_input_r_AWREGION <= ap_const_lv4_0;
    m_axi_input_r_AWSIZE <= ap_const_lv3_0;
    m_axi_input_r_AWUSER <= ap_const_lv1_0;
    m_axi_input_r_AWVALID <= ap_const_logic_0;
    m_axi_input_r_BREADY <= ap_const_logic_0;

    m_axi_input_r_RREADY_assign_proc : process(ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_92_reg_1193, ap_block_pp0_stage0_11001)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_lv1_1 = ap_reg_pp0_iter9_tmp_92_reg_1193))) then 
            m_axi_input_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_input_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_r_WDATA <= ap_const_lv32_0;
    m_axi_input_r_WID <= ap_const_lv1_0;
    m_axi_input_r_WLAST <= ap_const_logic_0;
    m_axi_input_r_WSTRB <= ap_const_lv4_0;
    m_axi_input_r_WUSER <= ap_const_lv1_0;
    m_axi_input_r_WVALID <= ap_const_logic_0;
    man_V_5_fu_858_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_s_fu_854_p1));
    man_V_6_fu_864_p3 <= 
        man_V_5_fu_858_p2 when (isneg_reg_1289(0) = '1') else 
        p_Result_s_fu_854_p1;
    n_cols_2_fu_531_p3 <= 
        tmp_87_fu_525_p2 when (tmp_86_fu_519_p2(0) = '1') else 
        n_cols_cast_fu_497_p1;
        n_cols_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n_cols_reg_1094),32));

    n_cols_fu_379_p3 <= 
        tmp_78_fu_367_p2 when (tmp_79_fu_373_p2(0) = '1') else 
        tmp_cast_fu_329_p1;
    n_depth_1_fu_557_p3 <= 
        tmp_90_fu_551_p2 when (tmp_89_fu_545_p2(0) = '1') else 
        n_depth_cast_fu_509_p1;
        n_depth_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n_depth_fu_503_p3),32));

    n_depth_fu_503_p3 <= 
        ap_const_lv16_3 when (icmp_reg_1099(0) = '1') else 
        curr_layer_in_ch;
    n_rows_2_fu_582_p3 <= 
        tmp_84_fu_578_p2 when (tmp_83_fu_573_p2(0) = '1') else 
        n_rows_cast_fu_565_p1;
        n_rows_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n_rows_reg_1141),32));

    n_rows_fu_489_p3 <= 
        tmp_75_fu_477_p2 when (tmp_76_fu_483_p2(0) = '1') else 
        tmp_119_cast_fu_410_p1;
    p_Result_s_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_847_p3),54));
        p_shl1_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_345_p3),22));

    p_shl1_fu_345_p3 <= (curr_layer_str_w & ap_const_lv3_0);
        p_shl2_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl2_fu_439_p3),22));

    p_shl2_fu_439_p3 <= (curr_layer_str_h & ap_const_lv5_0);
        p_shl3_cast_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl3_fu_451_p3),18));

    p_shl3_fu_451_p3 <= (curr_layer_str_h & ap_const_lv1_0);
        p_shl_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_333_p3),22));

    p_shl_fu_333_p3 <= (curr_layer_str_w & ap_const_lv5_0);
    sel_tmp1_fu_736_p3 <= 
        ap_const_lv16_0 when (sel_tmp_reg_1218(0) = '1') else 
        index_i_3_reg_1208;
    sel_tmp21_fu_946_p2 <= (ap_reg_pp0_iter12_tmp_104_reg_1305 xor ap_const_lv1_1);
    sel_tmp22_fu_951_p2 <= (tmp_108_reg_1329 and sel_tmp21_fu_946_p2);
    sel_tmp23_fu_956_p3 <= 
        tmp_119_reg_1335 when (sel_tmp22_fu_951_p2(0) = '1') else 
        ap_const_lv25_0;
    sel_tmp24_fu_967_p2 <= (sel_tmp26_demorgan_fu_963_p2 xor ap_const_lv1_1);
    sel_tmp25_fu_973_p2 <= (tmp_105_reg_1316 and sel_tmp24_fu_967_p2);
    sel_tmp26_demorgan_fu_963_p2 <= (tmp_108_reg_1329 or ap_reg_pp0_iter12_tmp_104_reg_1305);
    sel_tmp26_fu_978_p2 <= (tmp_110_fu_916_p2 xor ap_const_lv1_1);
    sel_tmp27_fu_984_p2 <= (sel_tmp26_fu_978_p2 and sel_tmp25_fu_973_p2);
    sel_tmp28_fu_990_p3 <= 
        storemerge_fu_939_p3 when (sel_tmp27_fu_984_p2(0) = '1') else 
        sel_tmp23_fu_956_p3;
    sel_tmp29_fu_998_p2 <= (tmp_110_fu_916_p2 and sel_tmp25_fu_973_p2);
    sel_tmp30_fu_1004_p3 <= 
        tmp_120_fu_935_p1 when (sel_tmp29_fu_998_p2(0) = '1') else 
        sel_tmp28_fu_990_p3;
    sel_tmp31_fu_1017_p2 <= (sel_tmp41_demorgan_fu_1012_p2 xor ap_const_lv1_1);
    sel_tmp32_fu_1023_p2 <= (tmp_111_fu_921_p2 and sel_tmp31_fu_1017_p2);
    sel_tmp41_demorgan_fu_1012_p2 <= (tmp_105_reg_1316 or sel_tmp26_demorgan_fu_963_p2);
    sel_tmp9_fu_673_p3 <= 
        ap_const_lv32_0 when (sel_tmp_fu_667_p2(0) = '1') else 
        i_3_fu_634_p2;
    sel_tmp_fu_667_p2 <= (tmp_96_fu_646_p2 and tmp_93_fu_625_p2);
    sext_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_offset),33));
        sh_amt_cast_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1322),32));

    sh_amt_fu_895_p3 <= 
        tmp_106_fu_883_p2 when (tmp_105_fu_877_p2(0) = '1') else 
        tmp_107_fu_889_p2;
    storemerge3_fu_1047_p3 <= 
        tmp_121_fu_1043_p1 when (sel_tmp32_reg_1351(0) = '1') else 
        sel_tmp30_reg_1346;
    storemerge_fu_939_p3 <= 
        ap_const_lv25_1FFFFFF when (ap_reg_pp0_iter12_isneg_reg_1289(0) = '1') else 
        ap_const_lv25_0;
        sum_cast_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_fu_793_p2),64));

    sum_fu_793_p2 <= std_logic_vector(signed(tmp_102_cast_fu_790_p1) + signed(sext_cast_reg_1188));
    tmp1_fu_602_p1 <= tmp_s_reg_1115(16 - 1 downto 0);
    tmp1_fu_602_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_1168) * signed(tmp1_fu_602_p1))), 32));
    tmp36_fu_467_p2 <= std_logic_vector(signed(p_shl3_cast_cast_fu_459_p1) + signed(tmp_126_cast_cast_fu_463_p1));
    tmp37_fu_590_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(n_cols_2_reg_1146) * signed(n_depth_1_reg_1152))), 32));
    tmp39_fu_721_p2 <= std_logic_vector(unsigned(j_2_fu_689_p3) + unsigned(tmp_74_reg_1136));
    tmp40_fu_770_p2 <= std_logic_vector(unsigned(tmp_113_cast_fu_762_p1) + unsigned(tmp_114_cast_fu_766_p1));
    tmp41_fu_780_p2 <= std_logic_vector(unsigned(tmp1_reg_1178) + unsigned(tmp49_cast_fu_776_p1));
        tmp44_cast_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp36_fu_467_p2),22));

    tmp49_cast_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp40_fu_770_p2),32));
    tmp_100_fu_717_p1 <= i_2_fu_681_p3(11 - 1 downto 0);
    tmp_101_fu_785_p2 <= std_logic_vector(unsigned(tmp39_reg_1244) + unsigned(tmp41_fu_780_p2));
        tmp_102_cast_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_101_reg_1273),33));

    tmp_103_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_1295),12));
    tmp_104_fu_838_p2 <= "1" when (tmp_114_fu_812_p1 = ap_const_lv63_0) else "0";
    tmp_105_fu_877_p2 <= "1" when (signed(F2_fu_871_p2) > signed(ap_const_lv12_14)) else "0";
    tmp_106_fu_883_p2 <= std_logic_vector(signed(ap_const_lv12_FEC) + signed(F2_fu_871_p2));
    tmp_107_fu_889_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(F2_fu_871_p2));
    tmp_108_fu_903_p2 <= "1" when (F2_fu_871_p2 = ap_const_lv12_14) else "0";
    tmp_110_fu_916_p2 <= "1" when (unsigned(sh_amt_reg_1322) < unsigned(ap_const_lv12_36)) else "0";
    tmp_111_fu_921_p2 <= "1" when (unsigned(sh_amt_reg_1322) < unsigned(ap_const_lv12_19)) else "0";
    tmp_112_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_913_p1),54));
    tmp_113_cast_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_jj_2_fu_755_p3),17));
    tmp_113_fu_930_p2 <= std_logic_vector(shift_right(signed(man_V_6_reg_1311),to_integer(unsigned('0' & tmp_112_fu_926_p1(31-1 downto 0)))));
    tmp_114_cast_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_i_2_fu_742_p3),17));
    tmp_114_fu_812_p1 <= ireg_V_fu_808_p1(63 - 1 downto 0);
        tmp_115_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter13_tmp_119_reg_1335),32));

    tmp_116_fu_1038_p2 <= std_logic_vector(shift_left(unsigned(tmp_115_fu_1035_p1),to_integer(unsigned('0' & sh_amt_cast_reg_1341(31-1 downto 0)))));
    tmp_118_fu_834_p1 <= ireg_V_fu_808_p1(52 - 1 downto 0);
        tmp_119_cast1_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter13_tmp_109_reg_1268),64));

    tmp_119_cast_fu_410_p0 <= curr_layer_in_h;
        tmp_119_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_119_cast_fu_410_p0),22));

    tmp_119_fu_909_p1 <= man_V_6_fu_864_p3(25 - 1 downto 0);
    tmp_120_fu_935_p1 <= tmp_113_fu_930_p2(25 - 1 downto 0);
    tmp_121_fu_1043_p1 <= tmp_116_fu_1038_p2(25 - 1 downto 0);
    tmp_122_fu_726_p1 <= jj_2_fu_705_p3(2 - 1 downto 0);
        tmp_126_cast_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(curr_layer_ker_h),18));

        tmp_130_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(curr_layer_ker_w),22));

    tmp_67_fu_847_p3 <= (ap_const_lv1_1 & tmp_118_reg_1300);
    tmp_69_fu_406_p0 <= curr_layer_in_h;
        tmp_69_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_69_fu_406_p0),32));

    tmp_70_fu_414_p0 <= ti;
    tmp_70_fu_414_p1 <= tmp_69_fu_406_p0;
    tmp_70_fu_414_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_70_fu_414_p0) * signed(tmp_70_fu_414_p1))), 32));
    tmp_72_fu_424_p0 <= row;
    tmp_72_fu_424_p1 <= curr_layer_str_h;
    tmp_72_fu_424_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_72_fu_424_p0) * signed(tmp_72_fu_424_p1))), 32));
    tmp_74_fu_433_p0 <= col;
    tmp_74_fu_433_p1 <= curr_layer_str_w;
    tmp_74_fu_433_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_74_fu_433_p0) * signed(tmp_74_fu_433_p1))), 32));
    tmp_75_fu_477_p2 <= std_logic_vector(signed(tmp44_cast_fu_473_p1) + signed(p_shl2_cast_fu_447_p1));
    tmp_76_fu_483_p2 <= "1" when (signed(tmp_75_fu_477_p2) < signed(tmp_119_cast_fu_410_p1)) else "0";
    tmp_77_fu_357_p2 <= std_logic_vector(signed(p_shl_cast_fu_341_p1) - signed(p_shl1_cast_fu_353_p1));
    tmp_78_fu_367_p2 <= std_logic_vector(unsigned(tmp_77_fu_357_p2) + unsigned(tmp_130_cast_fu_363_p1));
    tmp_79_fu_373_p2 <= "1" when (signed(tmp_78_fu_367_p2) < signed(tmp_cast_fu_329_p1)) else "0";
    tmp_80_fu_387_p4 <= curr_layer_in_ch(15 downto 2);
        tmp_81_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(curr_layer_in_ch),32));

    tmp_82_fu_568_p0 <= row;
    tmp_82_fu_568_p2 <= std_logic_vector(signed(tmp_82_fu_568_p0) + signed(n_rows_cast_fu_565_p1));
    tmp_83_fu_573_p2 <= "1" when (signed(tmp_82_fu_568_p2) > signed(tmp_69_reg_1120)) else "0";
    tmp_84_fu_578_p1 <= row;
    tmp_84_fu_578_p2 <= std_logic_vector(signed(tmp_69_reg_1120) - signed(tmp_84_fu_578_p1));
    tmp_85_fu_513_p0 <= col;
    tmp_85_fu_513_p2 <= std_logic_vector(signed(tmp_85_fu_513_p0) + signed(n_cols_cast_fu_497_p1));
    tmp_86_fu_519_p2 <= "1" when (signed(tmp_85_fu_513_p2) > signed(tmp_s_fu_403_p1)) else "0";
    tmp_87_fu_525_p1 <= col;
    tmp_87_fu_525_p2 <= std_logic_vector(signed(tmp_s_fu_403_p1) - signed(tmp_87_fu_525_p1));
    tmp_88_fu_539_p0 <= ti;
    tmp_88_fu_539_p2 <= std_logic_vector(signed(tmp_88_fu_539_p0) + signed(n_depth_cast_fu_509_p1));
    tmp_89_fu_545_p2 <= "1" when (signed(tmp_88_fu_539_p2) > signed(tmp_81_fu_500_p1)) else "0";
    tmp_90_fu_551_p1 <= ti;
    tmp_90_fu_551_p2 <= std_logic_vector(signed(tmp_81_fu_500_p1) - signed(tmp_90_fu_551_p1));
    tmp_91_fu_598_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp37_reg_1163) * signed(n_rows_2_reg_1157))), 32));
    tmp_92_fu_614_p2 <= "1" when (signed(itr_cast_fu_610_p1) < signed(tmp_91_reg_1173)) else "0";
    tmp_93_fu_625_p2 <= "1" when (j_reg_304 = n_cols_2_reg_1146) else "0";
    tmp_94_fu_630_p1 <= ap_phi_mux_i_phi_fu_297_p4(16 - 1 downto 0);
    tmp_96_fu_646_p2 <= "1" when (i_3_fu_634_p2 = n_rows_2_reg_1157) else "0";
    tmp_97_fu_651_p1 <= ap_phi_mux_jj_phi_fu_319_p4(16 - 1 downto 0);
    tmp_99_fu_713_p1 <= j_2_fu_689_p3(11 - 1 downto 0);
    tmp_cast_fu_329_p0 <= curr_layer_in_w;
        tmp_cast_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_cast_fu_329_p0),22));

    tmp_fu_594_p2 <= std_logic_vector(unsigned(tmp_70_reg_1126) + unsigned(tmp_72_reg_1131));
    tmp_s_fu_403_p0 <= curr_layer_in_w;
        tmp_s_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_403_p0),32));

end behav;
