-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    curr_layer_out_w_c_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    curr_layer_out_w_c_empty_n : IN STD_LOGIC;
    curr_layer_out_w_c_read : OUT STD_LOGIC;
    curr_layer_out_h_c_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    curr_layer_out_h_c_empty_n : IN STD_LOGIC;
    curr_layer_out_h_c_read : OUT STD_LOGIC;
    curr_layer_out_ch_c_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    curr_layer_out_ch_c_empty_n : IN STD_LOGIC;
    curr_layer_out_ch_c_read : OUT STD_LOGIC;
    m_axi_out_r_AWVALID : OUT STD_LOGIC;
    m_axi_out_r_AWREADY : IN STD_LOGIC;
    m_axi_out_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_WVALID : OUT STD_LOGIC;
    m_axi_out_r_WREADY : IN STD_LOGIC;
    m_axi_out_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_WLAST : OUT STD_LOGIC;
    m_axi_out_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_ARVALID : OUT STD_LOGIC;
    m_axi_out_r_ARREADY : IN STD_LOGIC;
    m_axi_out_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_RVALID : IN STD_LOGIC;
    m_axi_out_r_RREADY : OUT STD_LOGIC;
    m_axi_out_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_RLAST : IN STD_LOGIC;
    m_axi_out_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_BVALID : IN STD_LOGIC;
    m_axi_out_r_BREADY : OUT STD_LOGIC;
    m_axi_out_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_offset_dout : IN STD_LOGIC_VECTOR (29 downto 0);
    out_offset_empty_n : IN STD_LOGIC;
    out_offset_read : OUT STD_LOGIC;
    to_c_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    to_c_empty_n : IN STD_LOGIC;
    to_c_read : OUT STD_LOGIC;
    row_c_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    row_c_empty_n : IN STD_LOGIC;
    row_c_read : OUT STD_LOGIC;
    col_c_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    col_c_empty_n : IN STD_LOGIC;
    col_c_read : OUT STD_LOGIC;
    biasbuf_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    biasbuf_V_ce0 : OUT STD_LOGIC;
    biasbuf_V_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_0_ce0 : OUT STD_LOGIC;
    outputfm_V_0_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_1_ce0 : OUT STD_LOGIC;
    outputfm_V_1_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_10_ce0 : OUT STD_LOGIC;
    outputfm_V_10_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_11_ce0 : OUT STD_LOGIC;
    outputfm_V_11_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_12_ce0 : OUT STD_LOGIC;
    outputfm_V_12_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_13_ce0 : OUT STD_LOGIC;
    outputfm_V_13_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_14_ce0 : OUT STD_LOGIC;
    outputfm_V_14_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_15_ce0 : OUT STD_LOGIC;
    outputfm_V_15_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_16_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_16_ce0 : OUT STD_LOGIC;
    outputfm_V_16_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_17_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_17_ce0 : OUT STD_LOGIC;
    outputfm_V_17_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_18_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_18_ce0 : OUT STD_LOGIC;
    outputfm_V_18_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_19_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_19_ce0 : OUT STD_LOGIC;
    outputfm_V_19_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_2_ce0 : OUT STD_LOGIC;
    outputfm_V_2_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_20_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_20_ce0 : OUT STD_LOGIC;
    outputfm_V_20_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_21_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_21_ce0 : OUT STD_LOGIC;
    outputfm_V_21_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_22_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_22_ce0 : OUT STD_LOGIC;
    outputfm_V_22_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_23_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_23_ce0 : OUT STD_LOGIC;
    outputfm_V_23_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_24_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_24_ce0 : OUT STD_LOGIC;
    outputfm_V_24_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_25_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_25_ce0 : OUT STD_LOGIC;
    outputfm_V_25_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_26_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_26_ce0 : OUT STD_LOGIC;
    outputfm_V_26_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_27_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_27_ce0 : OUT STD_LOGIC;
    outputfm_V_27_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_3_ce0 : OUT STD_LOGIC;
    outputfm_V_3_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_4_ce0 : OUT STD_LOGIC;
    outputfm_V_4_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_5_ce0 : OUT STD_LOGIC;
    outputfm_V_5_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_6_ce0 : OUT STD_LOGIC;
    outputfm_V_6_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_7_ce0 : OUT STD_LOGIC;
    outputfm_V_7_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_8_ce0 : OUT STD_LOGIC;
    outputfm_V_8_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    outputfm_V_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_V_9_ce0 : OUT STD_LOGIC;
    outputfm_V_9_q0 : IN STD_LOGIC_VECTOR (47 downto 0) );
end;


architecture behav of write_output is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv16_23 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100011";
    constant ap_const_lv16_1C : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    constant ap_const_lv16_19 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv49_0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_D6 : STD_LOGIC_VECTOR (7 downto 0) := "11010110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal curr_layer_out_w_c_blk_n : STD_LOGIC;
    signal curr_layer_out_h_c_blk_n : STD_LOGIC;
    signal curr_layer_out_ch_c_blk_n : STD_LOGIC;
    signal out_r_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_offset_blk_n : STD_LOGIC;
    signal to_c_blk_n : STD_LOGIC;
    signal row_c_blk_n : STD_LOGIC;
    signal col_c_blk_n : STD_LOGIC;
    signal i_index_i_i_i_i_reg_312 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_index_i_i_i_i_reg_324 : STD_LOGIC_VECTOR (15 downto 0);
    signal itr_i_i_i_i_reg_336 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_i_i_i_i_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_i_i_i_i_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_i_i_i_i_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_offset_read_reg_865 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal curr_layer_out_w_c_r_reg_870 : STD_LOGIC_VECTOR (15 downto 0);
    signal curr_layer_out_h_c_r_reg_878 : STD_LOGIC_VECTOR (15 downto 0);
    signal curr_layer_out_ch_c_s_reg_884 : STD_LOGIC_VECTOR (15 downto 0);
    signal to_c_read_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_c_read_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_c_read_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i_i_i_i_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_i_i_i_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_i_i_i_i_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_i_i_i_i_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_i_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_size_fu_854_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_size_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_i_i_i_i_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_i_i_i_i_reg_935 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_rows_1_fu_508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_rows_1_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_o_1_fu_532_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_o_1_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_i_i_i_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_i_i_i_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_31_i_i_i_i_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_i_i_i_i_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cols_1_fu_572_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cols_1_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_i_i_i_i_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_i_i_i_i_reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp1_i_i_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_i_i_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_cast_i_i_fu_597_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_i_i_reg_982 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_47_i_i_i_i_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter11 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_out_r_AWREADY : STD_LOGIC;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter12 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_out_r_WREADY : STD_LOGIC;
    signal ap_block_state17_io : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_tmp_47_i_i_i_i_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal itr_i_i_fu_609_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_49_i_i_i_i_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_i_i_i_i_reg_996 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_49_i_i_i_i_reg_996 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_620_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_1002 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_i_i_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_i_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_sel_tmp_i_i_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_i_i_i_i_fu_655_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_i_i_i_i_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_i_i_i_i_fu_663_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_i_i_i_i_reg_1024 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter1_j_2_i_i_i_i_reg_1024 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_3_fu_679_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_3_reg_1030 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_687_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_38_reg_1036 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_index_fu_860_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_index_reg_1046 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_53_i_i_i_i_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_i_i_i_i_reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_i_i_i_i_fu_706_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_i_i_i_i_reg_1056 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_index_2_i_i_i_i_fu_719_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_index_2_i_i_i_i_reg_1061 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ii_index_2_fu_733_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_index_2_reg_1066 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_i_i_i_i_fu_767_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_i_i_i_i_reg_1076 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_ap_return : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_s_reg_1081 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_1_reg_1086 : STD_LOGIC_VECTOR (47 downto 0);
    signal out_addr_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter4_out_addr_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter5_out_addr_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter6_out_addr_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter7_out_addr_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter8_out_addr_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter9_out_addr_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter10_out_addr_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_i_i_i_i_fu_796_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_60_i_i_i_i_reg_1097 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_61_i_i_i_i_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_i_i_i_i_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_61_i_i_i_i_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_61_i_i_i_i_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_61_i_i_i_i_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_61_i_i_i_i_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_61_i_i_i_i_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_tmp_61_i_i_i_i_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dp_reg_1112 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_i_i_i_i_fu_847_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_i_i_i_i_reg_1117 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal grp_aesl_mux_load_28_35_s_fu_380_ap_start : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_ap_done : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_ap_idle : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_ap_ready : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_ap_ce : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_ce0 : STD_LOGIC;
    signal ap_phi_mux_i_index_i_i_i_i_phi_fu_316_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_ii_index_i_i_i_i_phi_fu_328_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_i_i_i_i_i_phi_fu_351_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start : STD_LOGIC := '0';
    signal tmp_57_i_i_i_i_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_i_i_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_out_r_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_out_r_WREADY : STD_LOGIC := '0';
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_rows_fu_464_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_depth_o_fu_482_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_rows_cast_i_i_i_i_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_i_i_i_i_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_20_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_i_i_i_i_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_i_i_i_i_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_o_cast_i_i_i_fu_488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_i_i_i_i_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_i_i_i_i_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_i_i_i_i_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_i_i_i_i_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_i_i_i_i_fu_544_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_cols_fu_548_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_cols_cast_i_i_i_i_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_i_i_i_i_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_i_i_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_i_i_i_i_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_i_i_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal itr_i_i_cast_i_i_fu_600_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_i_i_i_i_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_i_i_fu_647_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_2_fu_671_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_i_i_fu_713_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_index_fu_710_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_index_1_fu_726_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_i_i_cast_i_i_fu_744_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_63_i_i_cast_i_i_fu_748_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp4_i_i_fu_752_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp4_cast_i_i_fu_758_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_i_i_fu_762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_i_i_cast_i_i_fu_772_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_i_i_fu_775_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_58_i_i_i_i_fu_790_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_59_i_i_i_i_fu_793_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal res_V_1_fu_812_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exp_V_fu_815_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_V_2_fu_825_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_831_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal dp_1_fu_843_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_size_fu_854_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_index_fu_860_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_443_ce : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component aesl_mux_load_28_35_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        empty_11 : IN STD_LOGIC_VECTOR (4 downto 0);
        empty_12 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty : IN STD_LOGIC_VECTOR (31 downto 0);
        outputfm_V_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_0_ce0 : OUT STD_LOGIC;
        outputfm_V_0_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_1_ce0 : OUT STD_LOGIC;
        outputfm_V_1_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_10_ce0 : OUT STD_LOGIC;
        outputfm_V_10_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_11_ce0 : OUT STD_LOGIC;
        outputfm_V_11_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_12_ce0 : OUT STD_LOGIC;
        outputfm_V_12_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_13_ce0 : OUT STD_LOGIC;
        outputfm_V_13_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_14_ce0 : OUT STD_LOGIC;
        outputfm_V_14_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_15_ce0 : OUT STD_LOGIC;
        outputfm_V_15_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_16_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_16_ce0 : OUT STD_LOGIC;
        outputfm_V_16_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_17_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_17_ce0 : OUT STD_LOGIC;
        outputfm_V_17_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_18_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_18_ce0 : OUT STD_LOGIC;
        outputfm_V_18_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_19_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_19_ce0 : OUT STD_LOGIC;
        outputfm_V_19_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_2_ce0 : OUT STD_LOGIC;
        outputfm_V_2_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_20_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_20_ce0 : OUT STD_LOGIC;
        outputfm_V_20_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_21_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_21_ce0 : OUT STD_LOGIC;
        outputfm_V_21_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_22_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_22_ce0 : OUT STD_LOGIC;
        outputfm_V_22_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_23_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_23_ce0 : OUT STD_LOGIC;
        outputfm_V_23_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_24_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_24_ce0 : OUT STD_LOGIC;
        outputfm_V_24_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_25_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_25_ce0 : OUT STD_LOGIC;
        outputfm_V_25_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_26_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_26_ce0 : OUT STD_LOGIC;
        outputfm_V_26_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_27_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_27_ce0 : OUT STD_LOGIC;
        outputfm_V_27_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_3_ce0 : OUT STD_LOGIC;
        outputfm_V_3_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_4_ce0 : OUT STD_LOGIC;
        outputfm_V_4_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_5_ce0 : OUT STD_LOGIC;
        outputfm_V_5_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_6_ce0 : OUT STD_LOGIC;
        outputfm_V_6_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_7_ce0 : OUT STD_LOGIC;
        outputfm_V_7_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_8_ce0 : OUT STD_LOGIC;
        outputfm_V_8_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        outputfm_V_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_V_9_ce0 : OUT STD_LOGIC;
        outputfm_V_9_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component zhang_cnn_sitofp_bMq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component zhang_cnn_mul_muleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component zhang_cnn_mul_mulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_aesl_mux_load_28_35_s_fu_380 : component aesl_mux_load_28_35_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aesl_mux_load_28_35_s_fu_380_ap_start,
        ap_done => grp_aesl_mux_load_28_35_s_fu_380_ap_done,
        ap_idle => grp_aesl_mux_load_28_35_s_fu_380_ap_idle,
        ap_ready => grp_aesl_mux_load_28_35_s_fu_380_ap_ready,
        ap_ce => grp_aesl_mux_load_28_35_s_fu_380_ap_ce,
        empty_11 => tmp_38_reg_1036,
        empty_12 => i_2_i_i_i_i_reg_1018,
        empty => j_2_i_i_i_i_reg_1024,
        outputfm_V_0_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_address0,
        outputfm_V_0_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_ce0,
        outputfm_V_0_q0 => outputfm_V_0_q0,
        outputfm_V_1_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_address0,
        outputfm_V_1_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_ce0,
        outputfm_V_1_q0 => outputfm_V_1_q0,
        outputfm_V_10_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_address0,
        outputfm_V_10_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_ce0,
        outputfm_V_10_q0 => outputfm_V_10_q0,
        outputfm_V_11_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_address0,
        outputfm_V_11_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_ce0,
        outputfm_V_11_q0 => outputfm_V_11_q0,
        outputfm_V_12_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_address0,
        outputfm_V_12_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_ce0,
        outputfm_V_12_q0 => outputfm_V_12_q0,
        outputfm_V_13_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_address0,
        outputfm_V_13_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_ce0,
        outputfm_V_13_q0 => outputfm_V_13_q0,
        outputfm_V_14_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_address0,
        outputfm_V_14_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_ce0,
        outputfm_V_14_q0 => outputfm_V_14_q0,
        outputfm_V_15_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_address0,
        outputfm_V_15_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_ce0,
        outputfm_V_15_q0 => outputfm_V_15_q0,
        outputfm_V_16_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_address0,
        outputfm_V_16_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_ce0,
        outputfm_V_16_q0 => outputfm_V_16_q0,
        outputfm_V_17_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_address0,
        outputfm_V_17_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_ce0,
        outputfm_V_17_q0 => outputfm_V_17_q0,
        outputfm_V_18_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_address0,
        outputfm_V_18_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_ce0,
        outputfm_V_18_q0 => outputfm_V_18_q0,
        outputfm_V_19_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_address0,
        outputfm_V_19_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_ce0,
        outputfm_V_19_q0 => outputfm_V_19_q0,
        outputfm_V_2_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_address0,
        outputfm_V_2_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_ce0,
        outputfm_V_2_q0 => outputfm_V_2_q0,
        outputfm_V_20_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_address0,
        outputfm_V_20_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_ce0,
        outputfm_V_20_q0 => outputfm_V_20_q0,
        outputfm_V_21_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_address0,
        outputfm_V_21_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_ce0,
        outputfm_V_21_q0 => outputfm_V_21_q0,
        outputfm_V_22_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_address0,
        outputfm_V_22_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_ce0,
        outputfm_V_22_q0 => outputfm_V_22_q0,
        outputfm_V_23_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_address0,
        outputfm_V_23_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_ce0,
        outputfm_V_23_q0 => outputfm_V_23_q0,
        outputfm_V_24_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_address0,
        outputfm_V_24_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_ce0,
        outputfm_V_24_q0 => outputfm_V_24_q0,
        outputfm_V_25_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_address0,
        outputfm_V_25_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_ce0,
        outputfm_V_25_q0 => outputfm_V_25_q0,
        outputfm_V_26_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_address0,
        outputfm_V_26_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_ce0,
        outputfm_V_26_q0 => outputfm_V_26_q0,
        outputfm_V_27_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_address0,
        outputfm_V_27_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_ce0,
        outputfm_V_27_q0 => outputfm_V_27_q0,
        outputfm_V_3_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_address0,
        outputfm_V_3_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_ce0,
        outputfm_V_3_q0 => outputfm_V_3_q0,
        outputfm_V_4_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_address0,
        outputfm_V_4_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_ce0,
        outputfm_V_4_q0 => outputfm_V_4_q0,
        outputfm_V_5_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_address0,
        outputfm_V_5_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_ce0,
        outputfm_V_5_q0 => outputfm_V_5_q0,
        outputfm_V_6_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_address0,
        outputfm_V_6_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_ce0,
        outputfm_V_6_q0 => outputfm_V_6_q0,
        outputfm_V_7_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_address0,
        outputfm_V_7_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_ce0,
        outputfm_V_7_q0 => outputfm_V_7_q0,
        outputfm_V_8_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_address0,
        outputfm_V_8_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_ce0,
        outputfm_V_8_q0 => outputfm_V_8_q0,
        outputfm_V_9_address0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_address0,
        outputfm_V_9_ce0 => grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_ce0,
        outputfm_V_9_q0 => outputfm_V_9_q0,
        ap_return => grp_aesl_mux_load_28_35_s_fu_380_ap_return);

    zhang_cnn_sitofp_bMq_U679 : component zhang_cnn_sitofp_bMq
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_443_p0,
        ce => grp_fu_443_ce,
        dout => grp_fu_443_p1);

    zhang_cnn_mul_muleOg_U680 : component zhang_cnn_mul_muleOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => out_size_fu_854_p0,
        din1 => curr_layer_out_w_c_r_reg_870,
        dout => out_size_fu_854_p2);

    zhang_cnn_mul_mulcud_U681 : component zhang_cnn_mul_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => i_index_fu_860_p0,
        din1 => curr_layer_out_w_c_r_reg_870,
        dout => i_index_fu_860_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state5 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_47_i_i_i_i_fu_604_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aesl_mux_load_28_35_s_fu_380_ap_ready)) then 
                    ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_out_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_out_r_AWREADY <= ap_const_logic_0;
            else
                if (((ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11))) then
                    if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_out_r_AWREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_1 = m_axi_out_r_AWREADY))) then 
                        ap_reg_ioackin_m_axi_out_r_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_out_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_out_r_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then
                    if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_out_r_WREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_1 = m_axi_out_r_WREADY))) then 
                        ap_reg_ioackin_m_axi_out_r_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_i_i_i_i_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_i_i_i_i_reg_347 <= i_2_i_i_i_i_reg_1018;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_i_i_i_reg_347 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_index_i_i_i_i_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
                i_index_i_i_i_i_reg_312 <= i_index_2_i_i_i_i_reg_1061;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_index_i_i_i_i_reg_312 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    ii_i_i_i_i_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ii_i_i_i_i_reg_369 <= ii_3_reg_1030;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ii_i_i_i_i_reg_369 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ii_index_i_i_i_i_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
                ii_index_i_i_i_i_reg_324 <= ii_index_2_reg_1066;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ii_index_i_i_i_i_reg_324 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    itr_i_i_i_i_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_47_i_i_i_i_fu_604_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                itr_i_i_i_i_reg_336 <= itr_i_i_fu_609_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                itr_i_i_i_i_reg_336 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_i_i_i_i_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_47_i_i_i_i_fu_604_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_i_i_i_i_reg_358 <= j_fu_691_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_i_i_i_i_reg_358 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_out_addr_reg_1091 <= ap_reg_pp0_iter9_out_addr_reg_1091;
                ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter9_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter10_tmp_61_i_i_i_i_reg_1102 <= ap_reg_pp0_iter9_tmp_61_i_i_i_i_reg_1102;
                ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter12_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter13_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter12_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter14_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter13_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter15_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter14_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter15_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter1_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter3_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter4_out_addr_reg_1091 <= out_addr_reg_1091;
                ap_reg_pp0_iter4_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter3_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter5_out_addr_reg_1091 <= ap_reg_pp0_iter4_out_addr_reg_1091;
                ap_reg_pp0_iter5_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter4_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter5_tmp_61_i_i_i_i_reg_1102 <= tmp_61_i_i_i_i_reg_1102;
                ap_reg_pp0_iter6_out_addr_reg_1091 <= ap_reg_pp0_iter5_out_addr_reg_1091;
                ap_reg_pp0_iter6_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter5_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter6_tmp_61_i_i_i_i_reg_1102 <= ap_reg_pp0_iter5_tmp_61_i_i_i_i_reg_1102;
                ap_reg_pp0_iter7_out_addr_reg_1091 <= ap_reg_pp0_iter6_out_addr_reg_1091;
                ap_reg_pp0_iter7_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter6_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter7_tmp_61_i_i_i_i_reg_1102 <= ap_reg_pp0_iter6_tmp_61_i_i_i_i_reg_1102;
                ap_reg_pp0_iter8_out_addr_reg_1091 <= ap_reg_pp0_iter7_out_addr_reg_1091;
                ap_reg_pp0_iter8_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter7_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter8_tmp_61_i_i_i_i_reg_1102 <= ap_reg_pp0_iter7_tmp_61_i_i_i_i_reg_1102;
                ap_reg_pp0_iter9_out_addr_reg_1091 <= ap_reg_pp0_iter8_out_addr_reg_1091;
                ap_reg_pp0_iter9_tmp_47_i_i_i_i_reg_987 <= ap_reg_pp0_iter8_tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter9_tmp_61_i_i_i_i_reg_1102 <= ap_reg_pp0_iter8_tmp_61_i_i_i_i_reg_1102;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_j_2_i_i_i_i_reg_1024 <= j_2_i_i_i_i_reg_1024;
                ap_reg_pp0_iter1_sel_tmp_i_i_reg_1012 <= sel_tmp_i_i_reg_1012;
                ap_reg_pp0_iter1_tmp_47_i_i_i_i_reg_987 <= tmp_47_i_i_i_i_reg_987;
                ap_reg_pp0_iter1_tmp_49_i_i_i_i_reg_996 <= tmp_49_i_i_i_i_reg_996;
                tmp_47_i_i_i_i_reg_987 <= tmp_47_i_i_i_i_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_c_empty_n) or (ap_const_logic_0 = curr_layer_out_h_c_empty_n) or (ap_const_logic_0 = curr_layer_out_w_c_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_c_empty_n) or (ap_const_logic_0 = row_c_empty_n) or (ap_const_logic_0 = to_c_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                col_c_read_reg_905 <= col_c_dout;
                curr_layer_out_ch_c_s_reg_884 <= curr_layer_out_ch_c_dout;
                curr_layer_out_h_c_r_reg_878 <= curr_layer_out_h_c_dout;
                curr_layer_out_w_c_r_reg_870 <= curr_layer_out_w_c_dout;
                out_offset_read_reg_865 <= out_offset_dout;
                row_c_read_reg_898 <= row_c_dout;
                tmp_32_i_i_i_i_reg_912 <= tmp_32_i_i_i_i_fu_446_p2;
                tmp_34_i_i_i_i_reg_917 <= tmp_34_i_i_i_i_fu_452_p2;
                to_c_read_reg_890 <= to_c_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_pp0_iter9_tmp_61_i_i_i_i_reg_1102) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter9_tmp_47_i_i_i_i_reg_987))) then
                dp_reg_1112 <= grp_fu_443_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_47_i_i_i_i_fu_604_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_2_i_i_i_i_reg_1018 <= i_2_i_i_i_i_fu_655_p3;
                ii_3_reg_1030 <= ii_3_fu_679_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_47_i_i_i_i_reg_987) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                i_index_2_i_i_i_i_reg_1061 <= i_index_2_i_i_i_i_fu_719_p3;
                ii_index_2_reg_1066 <= ii_index_2_fu_733_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = sel_tmp_i_i_reg_1012) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_49_i_i_i_i_reg_996) and (tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_index_reg_1046 <= i_index_fu_860_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_47_i_i_i_i_fu_604_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ii_reg_1007 <= ii_fu_635_p2;
                j_2_i_i_i_i_reg_1024 <= j_2_i_i_i_i_fu_663_p3;
                sel_tmp_i_i_reg_1012 <= sel_tmp_i_i_fu_641_p2;
                tmp_38_reg_1036 <= tmp_38_fu_687_p1;
                tmp_49_i_i_i_i_reg_996 <= tmp_49_i_i_i_i_fu_615_p2;
                tmp_reg_1002 <= tmp_fu_620_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                n_cols_1_reg_961 <= n_cols_1_fu_572_p3;
                tmp_30_i_i_i_i_reg_951 <= tmp_30_i_i_i_i_fu_540_p2;
                tmp_31_i_i_i_i_reg_956 <= tmp_31_i_i_i_i_fu_544_p2;
                tmp_i_i_reg_967 <= tmp_i_i_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_depth_o_1_reg_946 <= n_depth_o_1_fu_532_p3;
                n_rows_1_reg_940 <= n_rows_1_fu_508_p3;
                out_size_reg_929 <= out_size_fu_854_p2;
                tmp_33_i_i_i_i_reg_935 <= tmp_33_i_i_i_i_fu_474_p2;
                tmp_i_i_i_i_reg_922 <= tmp_i_i_i_i_fu_458_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987))) then
                out_addr_reg_1091 <= sum_cast_i_i_fu_780_p1(32 - 1 downto 0);
                p_Val2_1_reg_1086 <= biasbuf_V_q0;
                p_Val2_s_reg_1081 <= grp_aesl_mux_load_28_35_s_fu_380_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1))) then
                p_0_i_i_i_i_i_reg_1117 <= p_0_i_i_i_i_i_fu_847_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    sext_cast_i_i_reg_982(29 downto 0) <= sext_cast_i_i_fu_597_p1(29 downto 0);
                tmp1_i_i_reg_977 <= tmp1_i_i_fu_592_p2;
                tmp_46_i_i_i_i_reg_972 <= tmp_46_i_i_i_i_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = sel_tmp_i_i_reg_1012) and (ap_const_lv1_1 = tmp_49_i_i_i_i_reg_996) and (tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_53_i_i_i_i_reg_1051 <= tmp_53_i_i_i_i_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_56_i_i_i_i_reg_1056 <= tmp_56_i_i_i_i_fu_706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter3_tmp_47_i_i_i_i_reg_987))) then
                tmp_60_i_i_i_i_reg_1097 <= tmp_60_i_i_i_i_fu_796_p2;
                tmp_61_i_i_i_i_reg_1102 <= tmp_61_i_i_i_i_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_47_i_i_i_i_reg_987))) then
                tmp_67_i_i_i_i_reg_1076 <= tmp_67_i_i_i_i_fu_767_p2;
            end if;
        end if;
    end process;
    sext_cast_i_i_reg_982(32 downto 30) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, curr_layer_out_w_c_empty_n, curr_layer_out_h_c_empty_n, curr_layer_out_ch_c_empty_n, out_offset_empty_n, to_c_empty_n, row_c_empty_n, col_c_empty_n, ap_enable_reg_pp0_iter17, tmp_47_i_i_i_i_fu_604_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_c_empty_n) or (ap_const_logic_0 = curr_layer_out_h_c_empty_n) or (ap_const_logic_0 = curr_layer_out_w_c_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_c_empty_n) or (ap_const_logic_0 = row_c_empty_n) or (ap_const_logic_0 = to_c_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_lv1_0 = tmp_47_i_i_i_i_fu_604_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and not(((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter17))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_lv1_0 = tmp_47_i_i_i_i_fu_604_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter17)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(5);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_out_r_BVALID, ap_enable_reg_pp0_iter17, ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_lv1_1 = ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) and (ap_const_logic_0 = m_axi_out_r_BVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter17));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_out_r_BVALID, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter17, ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987, ap_block_state16_io, ap_block_state17_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_lv1_1 = ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) and (ap_const_logic_0 = m_axi_out_r_BVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter17)) or ((ap_const_boolean_1 = ap_block_state17_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12)) or ((ap_const_boolean_1 = ap_block_state16_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_out_r_BVALID, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter17, ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987, ap_block_state16_io, ap_block_state17_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_lv1_1 = ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) and (ap_const_logic_0 = m_axi_out_r_BVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter17)) or ((ap_const_boolean_1 = ap_block_state17_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12)) or ((ap_const_boolean_1 = ap_block_state16_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, curr_layer_out_w_c_empty_n, curr_layer_out_h_c_empty_n, curr_layer_out_ch_c_empty_n, out_offset_empty_n, to_c_empty_n, row_c_empty_n, col_c_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_c_empty_n) or (ap_const_logic_0 = curr_layer_out_h_c_empty_n) or (ap_const_logic_0 = curr_layer_out_w_c_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_c_empty_n) or (ap_const_logic_0 = row_c_empty_n) or (ap_const_logic_0 = to_c_empty_n) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987, ap_sig_ioackin_m_axi_out_r_AWREADY)
    begin
                ap_block_state16_io <= ((ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_out_r_AWREADY));
    end process;

        ap_block_state16_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_io_assign_proc : process(ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987, ap_sig_ioackin_m_axi_out_r_WREADY)
    begin
                ap_block_state17_io <= ((ap_const_lv1_1 = ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_out_r_WREADY));
    end process;

        ap_block_state17_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp0_stage0_iter17_assign_proc : process(m_axi_out_r_BVALID, ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987)
    begin
                ap_block_state22_pp0_stage0_iter17 <= ((ap_const_lv1_1 = ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) and (ap_const_logic_0 = m_axi_out_r_BVALID));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(tmp_47_i_i_i_i_fu_604_p2)
    begin
        if ((ap_const_lv1_0 = tmp_47_i_i_i_i_fu_604_p2)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_i_i_i_i_phi_fu_351_p4_assign_proc : process(ap_block_pp0_stage0, tmp_47_i_i_i_i_reg_987, i_i_i_i_i_reg_347, ap_CS_fsm_pp0_stage0, i_2_i_i_i_i_reg_1018, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_i_i_i_i_phi_fu_351_p4 <= i_2_i_i_i_i_reg_1018;
        else 
            ap_phi_mux_i_i_i_i_i_phi_fu_351_p4 <= i_i_i_i_i_reg_347;
        end if; 
    end process;


    ap_phi_mux_i_index_i_i_i_i_phi_fu_316_p4_assign_proc : process(ap_block_pp0_stage0, i_index_i_i_i_i_reg_312, ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987, i_index_2_i_i_i_i_reg_1061, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            ap_phi_mux_i_index_i_i_i_i_phi_fu_316_p4 <= i_index_2_i_i_i_i_reg_1061;
        else 
            ap_phi_mux_i_index_i_i_i_i_phi_fu_316_p4 <= i_index_i_i_i_i_reg_312;
        end if; 
    end process;


    ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4_assign_proc : process(ap_block_pp0_stage0, tmp_47_i_i_i_i_reg_987, ii_i_i_i_i_reg_369, ap_CS_fsm_pp0_stage0, ii_3_reg_1030, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4 <= ii_3_reg_1030;
        else 
            ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4 <= ii_i_i_i_i_reg_369;
        end if; 
    end process;


    ap_phi_mux_ii_index_i_i_i_i_phi_fu_328_p4_assign_proc : process(ap_block_pp0_stage0, ii_index_i_i_i_i_reg_324, ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987, ii_index_2_reg_1066, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_47_i_i_i_i_reg_987) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            ap_phi_mux_ii_index_i_i_i_i_phi_fu_328_p4 <= ii_index_2_reg_1066;
        else 
            ap_phi_mux_ii_index_i_i_i_i_phi_fu_328_p4 <= ii_index_i_i_i_i_reg_324;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_out_r_AWREADY_assign_proc : process(m_axi_out_r_AWREADY, ap_reg_ioackin_m_axi_out_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_out_r_AWREADY)) then 
            ap_sig_ioackin_m_axi_out_r_AWREADY <= m_axi_out_r_AWREADY;
        else 
            ap_sig_ioackin_m_axi_out_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_out_r_WREADY_assign_proc : process(m_axi_out_r_WREADY, ap_reg_ioackin_m_axi_out_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_out_r_WREADY)) then 
            ap_sig_ioackin_m_axi_out_r_WREADY <= m_axi_out_r_WREADY;
        else 
            ap_sig_ioackin_m_axi_out_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    biasbuf_V_address0 <= tmp_57_i_i_i_i_fu_740_p1(7 - 1 downto 0);

    biasbuf_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            biasbuf_V_ce0 <= ap_const_logic_1;
        else 
            biasbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_c_blk_n <= col_c_empty_n;
        else 
            col_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    col_c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_c_empty_n, curr_layer_out_h_c_empty_n, curr_layer_out_ch_c_empty_n, out_offset_empty_n, to_c_empty_n, row_c_empty_n, col_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_c_empty_n) or (ap_const_logic_0 = curr_layer_out_h_c_empty_n) or (ap_const_logic_0 = curr_layer_out_w_c_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_c_empty_n) or (ap_const_logic_0 = row_c_empty_n) or (ap_const_logic_0 = to_c_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_c_read <= ap_const_logic_1;
        else 
            col_c_read <= ap_const_logic_0;
        end if; 
    end process;


    curr_layer_out_ch_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_ch_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_ch_c_blk_n <= curr_layer_out_ch_c_empty_n;
        else 
            curr_layer_out_ch_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    curr_layer_out_ch_c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_c_empty_n, curr_layer_out_h_c_empty_n, curr_layer_out_ch_c_empty_n, out_offset_empty_n, to_c_empty_n, row_c_empty_n, col_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_c_empty_n) or (ap_const_logic_0 = curr_layer_out_h_c_empty_n) or (ap_const_logic_0 = curr_layer_out_w_c_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_c_empty_n) or (ap_const_logic_0 = row_c_empty_n) or (ap_const_logic_0 = to_c_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_ch_c_read <= ap_const_logic_1;
        else 
            curr_layer_out_ch_c_read <= ap_const_logic_0;
        end if; 
    end process;


    curr_layer_out_h_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_h_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_h_c_blk_n <= curr_layer_out_h_c_empty_n;
        else 
            curr_layer_out_h_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    curr_layer_out_h_c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_c_empty_n, curr_layer_out_h_c_empty_n, curr_layer_out_ch_c_empty_n, out_offset_empty_n, to_c_empty_n, row_c_empty_n, col_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_c_empty_n) or (ap_const_logic_0 = curr_layer_out_h_c_empty_n) or (ap_const_logic_0 = curr_layer_out_w_c_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_c_empty_n) or (ap_const_logic_0 = row_c_empty_n) or (ap_const_logic_0 = to_c_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_h_c_read <= ap_const_logic_1;
        else 
            curr_layer_out_h_c_read <= ap_const_logic_0;
        end if; 
    end process;


    curr_layer_out_w_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_w_c_blk_n <= curr_layer_out_w_c_empty_n;
        else 
            curr_layer_out_w_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    curr_layer_out_w_c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_c_empty_n, curr_layer_out_h_c_empty_n, curr_layer_out_ch_c_empty_n, out_offset_empty_n, to_c_empty_n, row_c_empty_n, col_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_c_empty_n) or (ap_const_logic_0 = curr_layer_out_h_c_empty_n) or (ap_const_logic_0 = curr_layer_out_w_c_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_c_empty_n) or (ap_const_logic_0 = row_c_empty_n) or (ap_const_logic_0 = to_c_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_w_c_read <= ap_const_logic_1;
        else 
            curr_layer_out_w_c_read <= ap_const_logic_0;
        end if; 
    end process;

    dp_1_fu_843_p1 <= p_Result_s_fu_831_p5;
    exp_V_2_fu_825_p2 <= std_logic_vector(signed(ap_const_lv8_D6) + signed(exp_V_fu_815_p4));
    exp_V_fu_815_p4 <= res_V_1_fu_812_p1(30 downto 23);

    grp_aesl_mux_load_28_35_s_fu_380_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_aesl_mux_load_28_35_s_fu_380_ap_ce <= ap_const_logic_1;
        else 
            grp_aesl_mux_load_28_35_s_fu_380_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_aesl_mux_load_28_35_s_fu_380_ap_start <= ap_reg_grp_aesl_mux_load_28_35_s_fu_380_ap_start;

    grp_fu_443_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_443_ce <= ap_const_logic_1;
        else 
            grp_fu_443_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_443_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_60_i_i_i_i_reg_1097),64));

    i_2_i_i_i_i_fu_655_p3 <= 
        sel_tmp9_i_i_fu_647_p3 when (tmp_49_i_i_i_i_fu_615_p2(0) = '1') else 
        ap_phi_mux_i_i_i_i_i_phi_fu_351_p4;
    i_fu_624_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i_i_i_i_i_phi_fu_351_p4));
    i_index_2_i_i_i_i_fu_719_p3 <= 
        sel_tmp1_i_i_fu_713_p3 when (ap_reg_pp0_iter1_tmp_49_i_i_i_i_reg_996(0) = '1') else 
        ap_phi_mux_i_index_i_i_i_i_phi_fu_316_p4;
    i_index_fu_860_p0 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_reg_1002));
    ii_2_fu_671_p3 <= 
        ii_fu_635_p2 when (sel_tmp_i_i_fu_641_p2(0) = '1') else 
        ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4;
    ii_3_fu_679_p3 <= 
        ii_2_fu_671_p3 when (tmp_49_i_i_i_i_fu_615_p2(0) = '1') else 
        ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4;
    ii_fu_635_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_ii_i_i_i_i_phi_fu_373_p4));
    ii_index_1_fu_726_p3 <= 
        ii_index_fu_710_p1 when (ap_reg_pp0_iter1_sel_tmp_i_i_reg_1012(0) = '1') else 
        ap_phi_mux_ii_index_i_i_i_i_phi_fu_328_p4;
    ii_index_2_fu_733_p3 <= 
        ii_index_1_fu_726_p3 when (ap_reg_pp0_iter1_tmp_49_i_i_i_i_reg_996(0) = '1') else 
        ap_phi_mux_ii_index_i_i_i_i_phi_fu_328_p4;
    ii_index_fu_710_p1 <= tmp_53_i_i_i_i_reg_1051(16 - 1 downto 0);
    itr_i_i_cast_i_i_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(itr_i_i_i_i_reg_336),32));
    itr_i_i_fu_609_p2 <= std_logic_vector(unsigned(itr_i_i_i_i_reg_336) + unsigned(ap_const_lv31_1));
    j_2_i_i_i_i_fu_663_p3 <= 
        ap_const_lv32_0 when (tmp_49_i_i_i_i_fu_615_p2(0) = '1') else 
        j_i_i_i_i_reg_358;
    j_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j_2_i_i_i_i_fu_663_p3));
    m_axi_out_r_ARADDR <= ap_const_lv32_0;
    m_axi_out_r_ARBURST <= ap_const_lv2_0;
    m_axi_out_r_ARCACHE <= ap_const_lv4_0;
    m_axi_out_r_ARID <= ap_const_lv1_0;
    m_axi_out_r_ARLEN <= ap_const_lv32_0;
    m_axi_out_r_ARLOCK <= ap_const_lv2_0;
    m_axi_out_r_ARPROT <= ap_const_lv3_0;
    m_axi_out_r_ARQOS <= ap_const_lv4_0;
    m_axi_out_r_ARREGION <= ap_const_lv4_0;
    m_axi_out_r_ARSIZE <= ap_const_lv3_0;
    m_axi_out_r_ARUSER <= ap_const_lv1_0;
    m_axi_out_r_ARVALID <= ap_const_logic_0;
    m_axi_out_r_AWADDR <= ap_reg_pp0_iter10_out_addr_reg_1091;
    m_axi_out_r_AWBURST <= ap_const_lv2_0;
    m_axi_out_r_AWCACHE <= ap_const_lv4_0;
    m_axi_out_r_AWID <= ap_const_lv1_0;
    m_axi_out_r_AWLEN <= ap_const_lv32_1;
    m_axi_out_r_AWLOCK <= ap_const_lv2_0;
    m_axi_out_r_AWPROT <= ap_const_lv3_0;
    m_axi_out_r_AWQOS <= ap_const_lv4_0;
    m_axi_out_r_AWREGION <= ap_const_lv4_0;
    m_axi_out_r_AWSIZE <= ap_const_lv3_0;
    m_axi_out_r_AWUSER <= ap_const_lv1_0;

    m_axi_out_r_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987, ap_reg_ioackin_m_axi_out_r_AWREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_out_r_AWREADY) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11))) then 
            m_axi_out_r_AWVALID <= ap_const_logic_1;
        else 
            m_axi_out_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_out_r_BREADY_assign_proc : process(ap_enable_reg_pp0_iter17, ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987, ap_block_pp0_stage0_11001)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) and (ap_const_logic_1 = ap_enable_reg_pp0_iter17))) then 
            m_axi_out_r_BREADY <= ap_const_logic_1;
        else 
            m_axi_out_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_out_r_RREADY <= ap_const_logic_0;
    m_axi_out_r_WDATA <= p_0_i_i_i_i_i_reg_1117;
    m_axi_out_r_WID <= ap_const_lv1_0;
    m_axi_out_r_WLAST <= ap_const_logic_0;
    m_axi_out_r_WSTRB <= ap_const_lv4_F;
    m_axi_out_r_WUSER <= ap_const_lv1_0;

    m_axi_out_r_WVALID_assign_proc : process(ap_enable_reg_pp0_iter12, ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987, ap_block_pp0_stage0_01001, ap_reg_ioackin_m_axi_out_r_WREADY)
    begin
        if (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_out_r_WREADY) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            m_axi_out_r_WVALID <= ap_const_logic_1;
        else 
            m_axi_out_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    n_cols_1_fu_572_p3 <= 
        tmp_41_i_i_i_i_fu_568_p2 when (tmp_40_i_i_i_i_fu_563_p2(0) = '1') else 
        n_cols_cast_i_i_i_i_fu_554_p1;
        n_cols_cast_i_i_i_i_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n_cols_fu_548_p3),32));

    n_cols_fu_548_p3 <= 
        ap_const_lv16_19 when (tmp_33_i_i_i_i_reg_935(0) = '1') else 
        curr_layer_out_w_c_r_reg_870;
    n_depth_o_1_fu_532_p3 <= 
        tmp_44_i_i_i_i_fu_527_p2 when (tmp_43_i_i_i_i_fu_521_p2(0) = '1') else 
        n_depth_o_cast_i_i_i_fu_488_p1;
        n_depth_o_cast_i_i_i_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n_depth_o_fu_482_p3),32));

    n_depth_o_fu_482_p3 <= 
        ap_const_lv16_1C when (tmp_34_i_i_i_i_reg_917(0) = '1') else 
        curr_layer_out_ch_c_s_reg_884;
    n_rows_1_fu_508_p3 <= 
        tmp_38_i_i_i_i_fu_503_p2 when (tmp_37_i_i_i_i_fu_497_p2(0) = '1') else 
        n_rows_cast_i_i_i_i_fu_470_p1;
        n_rows_cast_i_i_i_i_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n_rows_fu_464_p3),32));

    n_rows_fu_464_p3 <= 
        ap_const_lv16_23 when (tmp_32_i_i_i_i_reg_912(0) = '1') else 
        curr_layer_out_h_c_r_reg_878;

    out_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_offset_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_offset_blk_n <= out_offset_empty_n;
        else 
            out_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_c_empty_n, curr_layer_out_h_c_empty_n, curr_layer_out_ch_c_empty_n, out_offset_empty_n, to_c_empty_n, row_c_empty_n, col_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_c_empty_n) or (ap_const_logic_0 = curr_layer_out_h_c_empty_n) or (ap_const_logic_0 = curr_layer_out_w_c_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_c_empty_n) or (ap_const_logic_0 = row_c_empty_n) or (ap_const_logic_0 = to_c_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_offset_read <= ap_const_logic_1;
        else 
            out_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    out_r_blk_n_AW_assign_proc : process(m_axi_out_r_AWREADY, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0, ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987)
    begin
        if (((ap_reg_pp0_iter10_tmp_47_i_i_i_i_reg_987 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11))) then 
            out_r_blk_n_AW <= m_axi_out_r_AWREADY;
        else 
            out_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    out_r_blk_n_B_assign_proc : process(m_axi_out_r_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter17, ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987)
    begin
        if (((ap_const_lv1_1 = ap_reg_pp0_iter16_tmp_47_i_i_i_i_reg_987) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter17))) then 
            out_r_blk_n_B <= m_axi_out_r_BVALID;
        else 
            out_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    out_r_blk_n_W_assign_proc : process(m_axi_out_r_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter12, ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987)
    begin
        if (((ap_const_lv1_1 = ap_reg_pp0_iter11_tmp_47_i_i_i_i_reg_987) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            out_r_blk_n_W <= m_axi_out_r_WREADY;
        else 
            out_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    out_size_fu_854_p0 <= tmp_i_i_i_i_20_fu_461_p1(16 - 1 downto 0);
    outputfm_V_0_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_address0;
    outputfm_V_0_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_0_ce0;
    outputfm_V_10_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_address0;
    outputfm_V_10_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_10_ce0;
    outputfm_V_11_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_address0;
    outputfm_V_11_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_11_ce0;
    outputfm_V_12_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_address0;
    outputfm_V_12_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_12_ce0;
    outputfm_V_13_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_address0;
    outputfm_V_13_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_13_ce0;
    outputfm_V_14_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_address0;
    outputfm_V_14_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_14_ce0;
    outputfm_V_15_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_address0;
    outputfm_V_15_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_15_ce0;
    outputfm_V_16_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_address0;
    outputfm_V_16_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_16_ce0;
    outputfm_V_17_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_address0;
    outputfm_V_17_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_17_ce0;
    outputfm_V_18_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_address0;
    outputfm_V_18_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_18_ce0;
    outputfm_V_19_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_address0;
    outputfm_V_19_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_19_ce0;
    outputfm_V_1_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_address0;
    outputfm_V_1_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_1_ce0;
    outputfm_V_20_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_address0;
    outputfm_V_20_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_20_ce0;
    outputfm_V_21_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_address0;
    outputfm_V_21_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_21_ce0;
    outputfm_V_22_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_address0;
    outputfm_V_22_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_22_ce0;
    outputfm_V_23_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_address0;
    outputfm_V_23_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_23_ce0;
    outputfm_V_24_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_address0;
    outputfm_V_24_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_24_ce0;
    outputfm_V_25_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_address0;
    outputfm_V_25_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_25_ce0;
    outputfm_V_26_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_address0;
    outputfm_V_26_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_26_ce0;
    outputfm_V_27_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_address0;
    outputfm_V_27_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_27_ce0;
    outputfm_V_2_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_address0;
    outputfm_V_2_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_2_ce0;
    outputfm_V_3_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_address0;
    outputfm_V_3_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_3_ce0;
    outputfm_V_4_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_address0;
    outputfm_V_4_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_4_ce0;
    outputfm_V_5_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_address0;
    outputfm_V_5_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_5_ce0;
    outputfm_V_6_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_address0;
    outputfm_V_6_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_6_ce0;
    outputfm_V_7_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_address0;
    outputfm_V_7_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_7_ce0;
    outputfm_V_8_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_address0;
    outputfm_V_8_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_8_ce0;
    outputfm_V_9_address0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_address0;
    outputfm_V_9_ce0 <= grp_aesl_mux_load_28_35_s_fu_380_outputfm_V_9_ce0;
    p_0_i_i_i_i_i_fu_847_p3 <= 
        ap_const_lv32_0 when (ap_reg_pp0_iter10_tmp_61_i_i_i_i_reg_1102(0) = '1') else 
        dp_1_fu_843_p1;
    p_Result_s_fu_831_p5 <= (res_V_1_fu_812_p1(31 downto 31) & exp_V_2_fu_825_p2 & res_V_1_fu_812_p1(22 downto 0));
    res_V_1_fu_812_p1 <= dp_reg_1112;

    row_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, row_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            row_c_blk_n <= row_c_empty_n;
        else 
            row_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    row_c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_c_empty_n, curr_layer_out_h_c_empty_n, curr_layer_out_ch_c_empty_n, out_offset_empty_n, to_c_empty_n, row_c_empty_n, col_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_c_empty_n) or (ap_const_logic_0 = curr_layer_out_h_c_empty_n) or (ap_const_logic_0 = curr_layer_out_w_c_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_c_empty_n) or (ap_const_logic_0 = row_c_empty_n) or (ap_const_logic_0 = to_c_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            row_c_read <= ap_const_logic_1;
        else 
            row_c_read <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_i_i_fu_713_p3 <= 
        ap_const_lv16_0 when (ap_reg_pp0_iter1_sel_tmp_i_i_reg_1012(0) = '1') else 
        i_index_reg_1046;
    sel_tmp9_i_i_fu_647_p3 <= 
        ap_const_lv32_0 when (sel_tmp_i_i_fu_641_p2(0) = '1') else 
        i_fu_624_p2;
    sel_tmp_i_i_fu_641_p2 <= (tmp_52_i_i_i_i_fu_630_p2 and tmp_49_i_i_i_i_fu_615_p2);
    sext_cast_i_i_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_offset_read_reg_865),33));
        sum_cast_i_i_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_i_i_fu_775_p2),64));

    sum_i_i_fu_775_p2 <= std_logic_vector(unsigned(sext_cast_i_i_reg_982) + unsigned(tmp_68_i_i_cast_i_i_fu_772_p1));
    tmp1_i_i_fu_592_p2 <= std_logic_vector(unsigned(tmp2_i_i_fu_588_p2) + unsigned(col_c_read_reg_905));
    tmp2_i_i_fu_588_p2 <= std_logic_vector(unsigned(tmp_31_i_i_i_i_reg_956) + unsigned(tmp_30_i_i_i_i_reg_951));
    tmp3_i_i_fu_762_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter1_j_2_i_i_i_i_reg_1024) + unsigned(tmp4_cast_i_i_fu_758_p1));
    tmp4_cast_i_i_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_i_i_fu_752_p2),32));
    tmp4_i_i_fu_752_p2 <= std_logic_vector(unsigned(tmp_62_i_i_cast_i_i_fu_744_p1) + unsigned(tmp_63_i_i_cast_i_i_fu_748_p1));
    tmp_30_i_i_i_i_fu_540_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(to_c_read_reg_890) * signed(out_size_reg_929))), 32));
    tmp_31_i_i_i_i_fu_544_p1 <= tmp_i_i_i_i_reg_922(16 - 1 downto 0);
    tmp_31_i_i_i_i_fu_544_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(row_c_read_reg_898) * signed(tmp_31_i_i_i_i_fu_544_p1))), 32));
    tmp_32_i_i_i_i_fu_446_p2 <= "1" when (signed(curr_layer_out_h_c_dout) > signed(ap_const_lv16_23)) else "0";
    tmp_33_i_i_i_i_fu_474_p2 <= "1" when (signed(curr_layer_out_w_c_r_reg_870) > signed(ap_const_lv16_19)) else "0";
    tmp_34_i_i_i_i_fu_452_p2 <= "1" when (signed(curr_layer_out_ch_c_dout) > signed(ap_const_lv16_1C)) else "0";
        tmp_35_i_i_i_i_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(curr_layer_out_ch_c_s_reg_884),32));

    tmp_36_i_i_i_i_fu_492_p2 <= std_logic_vector(signed(row_c_read_reg_898) + signed(n_rows_cast_i_i_i_i_fu_470_p1));
    tmp_37_i_i_i_i_fu_497_p2 <= "1" when (signed(tmp_36_i_i_i_i_fu_492_p2) > signed(tmp_i_i_i_i_20_fu_461_p1)) else "0";
    tmp_38_fu_687_p1 <= ii_3_fu_679_p3(5 - 1 downto 0);
    tmp_38_i_i_i_i_fu_503_p2 <= std_logic_vector(signed(tmp_i_i_i_i_20_fu_461_p1) - signed(row_c_read_reg_898));
    tmp_39_i_i_i_i_fu_558_p2 <= std_logic_vector(unsigned(col_c_read_reg_905) + unsigned(n_cols_cast_i_i_i_i_fu_554_p1));
    tmp_40_i_i_i_i_fu_563_p2 <= "1" when (signed(tmp_39_i_i_i_i_fu_558_p2) > signed(tmp_i_i_i_i_reg_922)) else "0";
    tmp_41_i_i_i_i_fu_568_p2 <= std_logic_vector(signed(tmp_i_i_i_i_reg_922) - signed(col_c_read_reg_905));
    tmp_42_i_i_i_i_fu_516_p2 <= std_logic_vector(signed(to_c_read_reg_890) + signed(n_depth_o_cast_i_i_i_fu_488_p1));
    tmp_43_i_i_i_i_fu_521_p2 <= "1" when (signed(tmp_42_i_i_i_i_fu_516_p2) > signed(tmp_35_i_i_i_i_fu_479_p1)) else "0";
    tmp_44_i_i_i_i_fu_527_p2 <= std_logic_vector(signed(tmp_35_i_i_i_i_fu_479_p1) - signed(to_c_read_reg_890));
    tmp_46_i_i_i_i_fu_584_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_i_i_reg_967) * signed(n_cols_1_reg_961))), 32));
    tmp_47_i_i_i_i_fu_604_p2 <= "1" when (signed(itr_i_i_cast_i_i_fu_600_p1) < signed(tmp_46_i_i_i_i_reg_972)) else "0";
    tmp_49_i_i_i_i_fu_615_p2 <= "1" when (j_i_i_i_i_reg_358 = n_cols_1_reg_961) else "0";
    tmp_52_i_i_i_i_fu_630_p2 <= "1" when (i_fu_624_p2 = n_rows_1_reg_940) else "0";
    tmp_53_i_i_i_i_fu_702_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(out_size_reg_929) * signed(ii_reg_1007))), 32));
    tmp_56_i_i_i_i_fu_706_p2 <= std_logic_vector(unsigned(ii_3_reg_1030) + unsigned(to_c_read_reg_890));
        tmp_57_i_i_i_i_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_i_i_i_i_reg_1056),64));

        tmp_58_i_i_i_i_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_1081),49));

        tmp_59_i_i_i_i_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_1086),49));

    tmp_60_i_i_i_i_fu_796_p2 <= std_logic_vector(signed(tmp_58_i_i_i_i_fu_790_p1) + signed(tmp_59_i_i_i_i_fu_793_p1));
    tmp_61_i_i_i_i_fu_802_p2 <= "1" when (tmp_60_i_i_i_i_fu_796_p2 = ap_const_lv49_0) else "0";
    tmp_62_i_i_cast_i_i_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_index_2_fu_733_p3),17));
    tmp_63_i_i_cast_i_i_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_index_2_i_i_i_i_fu_719_p3),17));
    tmp_67_i_i_i_i_fu_767_p2 <= std_logic_vector(unsigned(tmp1_i_i_reg_977) + unsigned(tmp3_i_i_fu_762_p2));
        tmp_68_i_i_cast_i_i_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_67_i_i_i_i_reg_1076),33));

    tmp_fu_620_p1 <= ap_phi_mux_i_i_i_i_i_phi_fu_351_p4(16 - 1 downto 0);
    tmp_i_i_fu_580_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(n_rows_1_reg_940) * signed(n_depth_o_1_reg_946))), 32));
        tmp_i_i_i_i_20_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(curr_layer_out_h_c_r_reg_878),32));

        tmp_i_i_i_i_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(curr_layer_out_w_c_r_reg_870),32));


    to_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, to_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            to_c_blk_n <= to_c_empty_n;
        else 
            to_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    to_c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_c_empty_n, curr_layer_out_h_c_empty_n, curr_layer_out_ch_c_empty_n, out_offset_empty_n, to_c_empty_n, row_c_empty_n, col_c_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_c_empty_n) or (ap_const_logic_0 = curr_layer_out_h_c_empty_n) or (ap_const_logic_0 = curr_layer_out_w_c_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_c_empty_n) or (ap_const_logic_0 = row_c_empty_n) or (ap_const_logic_0 = to_c_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            to_c_read <= ap_const_logic_1;
        else 
            to_c_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
