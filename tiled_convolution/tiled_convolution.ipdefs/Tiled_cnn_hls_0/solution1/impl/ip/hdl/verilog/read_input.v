// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_input (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR,
        m_axi_input_r_AWID,
        m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID,
        m_axi_input_r_WREADY,
        m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST,
        m_axi_input_r_WID,
        m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR,
        m_axi_input_r_ARID,
        m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID,
        m_axi_input_r_RREADY,
        m_axi_input_r_RDATA,
        m_axi_input_r_RLAST,
        m_axi_input_r_RID,
        m_axi_input_r_RUSER,
        m_axi_input_r_RRESP,
        m_axi_input_r_BVALID,
        m_axi_input_r_BREADY,
        m_axi_input_r_BRESP,
        m_axi_input_r_BID,
        m_axi_input_r_BUSER,
        input_offset,
        curr_layer_in_w,
        curr_layer_in_h,
        curr_layer_in_ch,
        curr_layer_ker_w,
        curr_layer_ker_h,
        curr_layer_str_w,
        curr_layer_str_h,
        ti,
        row,
        col,
        inputfm_0_V_address0,
        inputfm_0_V_ce0,
        inputfm_0_V_we0,
        inputfm_0_V_d0,
        inputfm_1_V_address0,
        inputfm_1_V_ce0,
        inputfm_1_V_we0,
        inputfm_1_V_d0,
        inputfm_2_V_address0,
        inputfm_2_V_ce0,
        inputfm_2_V_we0,
        inputfm_2_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state20 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_r_AWVALID;
input   m_axi_input_r_AWREADY;
output  [31:0] m_axi_input_r_AWADDR;
output  [0:0] m_axi_input_r_AWID;
output  [31:0] m_axi_input_r_AWLEN;
output  [2:0] m_axi_input_r_AWSIZE;
output  [1:0] m_axi_input_r_AWBURST;
output  [1:0] m_axi_input_r_AWLOCK;
output  [3:0] m_axi_input_r_AWCACHE;
output  [2:0] m_axi_input_r_AWPROT;
output  [3:0] m_axi_input_r_AWQOS;
output  [3:0] m_axi_input_r_AWREGION;
output  [0:0] m_axi_input_r_AWUSER;
output   m_axi_input_r_WVALID;
input   m_axi_input_r_WREADY;
output  [31:0] m_axi_input_r_WDATA;
output  [3:0] m_axi_input_r_WSTRB;
output   m_axi_input_r_WLAST;
output  [0:0] m_axi_input_r_WID;
output  [0:0] m_axi_input_r_WUSER;
output   m_axi_input_r_ARVALID;
input   m_axi_input_r_ARREADY;
output  [31:0] m_axi_input_r_ARADDR;
output  [0:0] m_axi_input_r_ARID;
output  [31:0] m_axi_input_r_ARLEN;
output  [2:0] m_axi_input_r_ARSIZE;
output  [1:0] m_axi_input_r_ARBURST;
output  [1:0] m_axi_input_r_ARLOCK;
output  [3:0] m_axi_input_r_ARCACHE;
output  [2:0] m_axi_input_r_ARPROT;
output  [3:0] m_axi_input_r_ARQOS;
output  [3:0] m_axi_input_r_ARREGION;
output  [0:0] m_axi_input_r_ARUSER;
input   m_axi_input_r_RVALID;
output   m_axi_input_r_RREADY;
input  [31:0] m_axi_input_r_RDATA;
input   m_axi_input_r_RLAST;
input  [0:0] m_axi_input_r_RID;
input  [0:0] m_axi_input_r_RUSER;
input  [1:0] m_axi_input_r_RRESP;
input   m_axi_input_r_BVALID;
output   m_axi_input_r_BREADY;
input  [1:0] m_axi_input_r_BRESP;
input  [0:0] m_axi_input_r_BID;
input  [0:0] m_axi_input_r_BUSER;
input  [29:0] input_offset;
input  [15:0] curr_layer_in_w;
input  [15:0] curr_layer_in_h;
input  [15:0] curr_layer_in_ch;
input  [15:0] curr_layer_ker_w;
input  [15:0] curr_layer_ker_h;
input  [15:0] curr_layer_str_w;
input  [15:0] curr_layer_str_h;
input  [31:0] ti;
input  [31:0] row;
input  [31:0] col;
output  [9:0] inputfm_0_V_address0;
output   inputfm_0_V_ce0;
output   inputfm_0_V_we0;
output  [24:0] inputfm_0_V_d0;
output  [9:0] inputfm_1_V_address0;
output   inputfm_1_V_ce0;
output   inputfm_1_V_we0;
output  [24:0] inputfm_1_V_d0;
output  [9:0] inputfm_2_V_address0;
output   inputfm_2_V_ce0;
output   inputfm_2_V_we0;
output  [24:0] inputfm_2_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_r_ARVALID;
reg m_axi_input_r_RREADY;
reg inputfm_0_V_ce0;
reg inputfm_0_V_we0;
reg inputfm_1_V_ce0;
reg inputfm_1_V_we0;
reg inputfm_2_V_ce0;
reg inputfm_2_V_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_r_blk_n_AR;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_92_reg_1193;
reg   [0:0] ap_reg_pp0_iter2_tmp_92_reg_1193;
reg    input_r_blk_n_R;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] ap_reg_pp0_iter9_tmp_92_reg_1193;
reg   [15:0] index_i_reg_258;
reg   [15:0] index_jj_reg_270;
reg   [30:0] itr_reg_282;
reg   [31:0] i_reg_293;
reg   [31:0] j_reg_304;
reg   [31:0] jj_reg_315;
wire   [21:0] n_cols_fu_379_p3;
reg   [21:0] n_cols_reg_1094;
wire   [0:0] icmp_fu_397_p2;
reg   [0:0] icmp_reg_1099;
wire    ap_CS_fsm_state2;
wire  signed [31:0] tmp_s_fu_403_p1;
reg  signed [31:0] tmp_s_reg_1115;
wire  signed [31:0] tmp_69_fu_406_p1;
reg  signed [31:0] tmp_69_reg_1120;
wire   [31:0] tmp_70_fu_414_p2;
reg   [31:0] tmp_70_reg_1126;
wire   [31:0] tmp_72_fu_424_p2;
reg   [31:0] tmp_72_reg_1131;
wire   [31:0] tmp_74_fu_433_p2;
reg   [31:0] tmp_74_reg_1136;
wire   [21:0] n_rows_fu_489_p3;
reg   [21:0] n_rows_reg_1141;
wire  signed [31:0] n_cols_2_fu_531_p3;
reg  signed [31:0] n_cols_2_reg_1146;
wire  signed [31:0] n_depth_1_fu_557_p3;
reg  signed [31:0] n_depth_1_reg_1152;
wire  signed [31:0] n_rows_2_fu_582_p3;
reg  signed [31:0] n_rows_2_reg_1157;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp37_fu_590_p2;
reg  signed [31:0] tmp37_reg_1163;
wire  signed [31:0] tmp_fu_594_p2;
reg  signed [31:0] tmp_reg_1168;
wire   [31:0] tmp_91_fu_598_p2;
reg   [31:0] tmp_91_reg_1173;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp1_fu_602_p2;
reg   [31:0] tmp1_reg_1178;
wire  signed [15:0] tmp38_fu_1056_p2;
reg  signed [15:0] tmp38_reg_1183;
wire   [32:0] sext_cast_fu_606_p1;
reg   [32:0] sext_cast_reg_1188;
wire   [0:0] tmp_92_fu_614_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
reg    ap_sig_ioackin_m_axi_input_r_ARREADY;
reg    ap_block_state8_io;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
reg    ap_block_state15_pp0_stage0_iter10;
wire    ap_block_state16_pp0_stage0_iter11;
wire    ap_block_state17_pp0_stage0_iter12;
wire    ap_block_state18_pp0_stage0_iter13;
wire    ap_block_state19_pp0_stage0_iter14;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_tmp_92_reg_1193;
reg   [0:0] ap_reg_pp0_iter3_tmp_92_reg_1193;
reg   [0:0] ap_reg_pp0_iter4_tmp_92_reg_1193;
reg   [0:0] ap_reg_pp0_iter5_tmp_92_reg_1193;
reg   [0:0] ap_reg_pp0_iter6_tmp_92_reg_1193;
reg   [0:0] ap_reg_pp0_iter7_tmp_92_reg_1193;
reg   [0:0] ap_reg_pp0_iter8_tmp_92_reg_1193;
reg   [0:0] ap_reg_pp0_iter10_tmp_92_reg_1193;
reg   [0:0] ap_reg_pp0_iter11_tmp_92_reg_1193;
reg   [0:0] ap_reg_pp0_iter12_tmp_92_reg_1193;
wire   [30:0] itr_2_fu_619_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_93_fu_625_p2;
reg   [0:0] tmp_93_reg_1202;
wire  signed [15:0] index_i_3_fu_1060_p2;
reg  signed [15:0] index_i_3_reg_1208;
wire  signed [15:0] index_jj_3_fu_1065_p2;
reg  signed [15:0] index_jj_3_reg_1213;
wire   [0:0] sel_tmp_fu_667_p2;
reg   [0:0] sel_tmp_reg_1218;
wire   [31:0] i_2_fu_681_p3;
reg   [31:0] i_2_reg_1224;
wire   [31:0] jj_2_fu_705_p3;
reg   [31:0] jj_2_reg_1229;
wire   [10:0] tmp_99_fu_713_p1;
reg   [10:0] tmp_99_reg_1234;
wire  signed [10:0] tmp_100_fu_717_p1;
reg  signed [10:0] tmp_100_reg_1239;
wire   [31:0] tmp39_fu_721_p2;
reg   [31:0] tmp39_reg_1244;
wire   [1:0] tmp_122_fu_726_p1;
reg   [1:0] tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter1_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter2_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter3_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter4_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter5_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter6_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter7_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter8_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter9_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter10_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter11_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter12_tmp_122_reg_1249;
reg   [1:0] ap_reg_pp0_iter13_tmp_122_reg_1249;
wire   [31:0] j_3_fu_730_p2;
wire   [15:0] index_i_2_fu_742_p3;
reg   [15:0] index_i_2_reg_1258;
reg    ap_enable_reg_pp0_iter1;
wire   [15:0] index_jj_2_fu_755_p3;
reg   [15:0] index_jj_2_reg_1263;
wire  signed [10:0] grp_fu_1070_p3;
reg  signed [10:0] tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter2_tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter3_tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter4_tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter5_tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter6_tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter7_tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter8_tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter9_tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter10_tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter11_tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter12_tmp_109_reg_1268;
reg  signed [10:0] ap_reg_pp0_iter13_tmp_109_reg_1268;
wire   [31:0] tmp_101_fu_785_p2;
reg   [31:0] tmp_101_reg_1273;
reg   [31:0] input_addr_reg_1278;
reg   [31:0] input_addr_read_reg_1284;
reg   [0:0] isneg_reg_1289;
reg   [0:0] ap_reg_pp0_iter12_isneg_reg_1289;
reg   [10:0] exp_tmp_V_reg_1295;
wire   [51:0] tmp_118_fu_834_p1;
reg   [51:0] tmp_118_reg_1300;
wire   [0:0] tmp_104_fu_838_p2;
reg   [0:0] tmp_104_reg_1305;
reg   [0:0] ap_reg_pp0_iter12_tmp_104_reg_1305;
wire   [53:0] man_V_6_fu_864_p3;
reg   [53:0] man_V_6_reg_1311;
wire   [0:0] tmp_105_fu_877_p2;
reg   [0:0] tmp_105_reg_1316;
wire   [11:0] sh_amt_fu_895_p3;
reg   [11:0] sh_amt_reg_1322;
wire   [0:0] tmp_108_fu_903_p2;
reg   [0:0] tmp_108_reg_1329;
wire   [24:0] tmp_119_fu_909_p1;
reg   [24:0] tmp_119_reg_1335;
reg   [24:0] ap_reg_pp0_iter13_tmp_119_reg_1335;
wire  signed [31:0] sh_amt_cast_fu_913_p1;
reg  signed [31:0] sh_amt_cast_reg_1341;
wire   [24:0] sel_tmp30_fu_1004_p3;
reg   [24:0] sel_tmp30_reg_1346;
wire   [0:0] sel_tmp32_fu_1023_p2;
reg   [0:0] sel_tmp32_reg_1351;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg   [15:0] ap_phi_mux_index_i_phi_fu_262_p4;
reg   [15:0] ap_phi_mux_index_jj_phi_fu_274_p4;
reg   [31:0] ap_phi_mux_i_phi_fu_297_p4;
reg   [31:0] ap_phi_mux_jj_phi_fu_319_p4;
wire  signed [63:0] tmp_119_cast1_fu_1029_p1;
wire  signed [63:0] sum_cast_fu_798_p1;
reg    ap_reg_ioackin_m_axi_input_r_ARREADY;
reg    ap_block_pp0_stage0_01001;
wire   [24:0] storemerge3_fu_1047_p3;
wire  signed [15:0] tmp_cast_fu_329_p0;
wire   [20:0] p_shl_fu_333_p3;
wire   [18:0] p_shl1_fu_345_p3;
wire  signed [21:0] p_shl_cast_fu_341_p1;
wire  signed [21:0] p_shl1_cast_fu_353_p1;
wire   [21:0] tmp_77_fu_357_p2;
wire  signed [21:0] tmp_130_cast_fu_363_p1;
wire   [21:0] tmp_78_fu_367_p2;
wire  signed [21:0] tmp_cast_fu_329_p1;
wire   [0:0] tmp_79_fu_373_p2;
wire   [13:0] tmp_80_fu_387_p4;
wire  signed [15:0] tmp_s_fu_403_p0;
wire  signed [15:0] tmp_69_fu_406_p0;
wire  signed [15:0] tmp_119_cast_fu_410_p0;
wire  signed [31:0] tmp_70_fu_414_p0;
wire  signed [15:0] tmp_70_fu_414_p1;
wire  signed [31:0] tmp_72_fu_424_p0;
wire  signed [15:0] tmp_72_fu_424_p1;
wire  signed [31:0] tmp_74_fu_433_p0;
wire  signed [15:0] tmp_74_fu_433_p1;
wire   [20:0] p_shl2_fu_439_p3;
wire   [16:0] p_shl3_fu_451_p3;
wire  signed [17:0] p_shl3_cast_cast_fu_459_p1;
wire  signed [17:0] tmp_126_cast_cast_fu_463_p1;
wire   [17:0] tmp36_fu_467_p2;
wire  signed [21:0] tmp44_cast_fu_473_p1;
wire  signed [21:0] p_shl2_cast_fu_447_p1;
wire   [21:0] tmp_75_fu_477_p2;
wire  signed [21:0] tmp_119_cast_fu_410_p1;
wire   [0:0] tmp_76_fu_483_p2;
wire   [15:0] n_depth_fu_503_p3;
wire  signed [31:0] tmp_85_fu_513_p0;
wire  signed [31:0] n_cols_cast_fu_497_p1;
wire   [31:0] tmp_85_fu_513_p2;
wire  signed [31:0] tmp_87_fu_525_p1;
wire   [0:0] tmp_86_fu_519_p2;
wire   [31:0] tmp_87_fu_525_p2;
wire  signed [31:0] tmp_88_fu_539_p0;
wire  signed [31:0] n_depth_cast_fu_509_p1;
wire   [31:0] tmp_88_fu_539_p2;
wire  signed [31:0] tmp_81_fu_500_p1;
wire  signed [31:0] tmp_90_fu_551_p1;
wire   [0:0] tmp_89_fu_545_p2;
wire   [31:0] tmp_90_fu_551_p2;
wire  signed [31:0] tmp_82_fu_568_p0;
wire  signed [31:0] n_rows_cast_fu_565_p1;
wire   [31:0] tmp_82_fu_568_p2;
wire  signed [31:0] tmp_84_fu_578_p1;
wire   [0:0] tmp_83_fu_573_p2;
wire   [31:0] tmp_84_fu_578_p2;
wire  signed [15:0] tmp1_fu_602_p1;
wire   [31:0] itr_cast_fu_610_p1;
wire   [15:0] tmp_94_fu_630_p1;
wire   [31:0] i_3_fu_634_p2;
wire   [15:0] tmp_97_fu_651_p1;
wire   [0:0] tmp_96_fu_646_p2;
wire   [31:0] sel_tmp9_fu_673_p3;
wire   [31:0] jj_3_fu_655_p2;
wire   [31:0] jj_4_fu_697_p3;
wire   [31:0] j_2_fu_689_p3;
wire   [15:0] sel_tmp1_fu_736_p3;
wire   [15:0] index_jj_4_fu_749_p3;
wire   [16:0] tmp_113_cast_fu_762_p1;
wire   [16:0] tmp_114_cast_fu_766_p1;
wire   [16:0] tmp40_fu_770_p2;
wire   [31:0] tmp49_cast_fu_776_p1;
wire   [31:0] tmp41_fu_780_p2;
wire  signed [32:0] tmp_102_cast_fu_790_p1;
wire   [32:0] sum_fu_793_p2;
wire   [63:0] d_assign_fu_326_p1;
wire   [63:0] ireg_V_fu_808_p1;
wire   [62:0] tmp_114_fu_812_p1;
wire   [52:0] tmp_67_fu_847_p3;
wire   [53:0] p_Result_s_fu_854_p1;
wire   [53:0] man_V_5_fu_858_p2;
wire   [11:0] tmp_103_fu_844_p1;
wire   [11:0] F2_fu_871_p2;
wire   [11:0] tmp_106_fu_883_p2;
wire   [11:0] tmp_107_fu_889_p2;
wire   [53:0] tmp_112_fu_926_p1;
wire   [53:0] tmp_113_fu_930_p2;
wire   [0:0] sel_tmp21_fu_946_p2;
wire   [0:0] sel_tmp22_fu_951_p2;
wire   [0:0] sel_tmp26_demorgan_fu_963_p2;
wire   [0:0] sel_tmp24_fu_967_p2;
wire   [0:0] tmp_110_fu_916_p2;
wire   [0:0] sel_tmp25_fu_973_p2;
wire   [0:0] sel_tmp26_fu_978_p2;
wire   [0:0] sel_tmp27_fu_984_p2;
wire   [24:0] storemerge_fu_939_p3;
wire   [24:0] sel_tmp23_fu_956_p3;
wire   [0:0] sel_tmp29_fu_998_p2;
wire   [24:0] tmp_120_fu_935_p1;
wire   [24:0] sel_tmp28_fu_990_p3;
wire   [0:0] sel_tmp41_demorgan_fu_1012_p2;
wire   [0:0] tmp_111_fu_921_p2;
wire   [0:0] sel_tmp31_fu_1017_p2;
wire  signed [31:0] tmp_115_fu_1035_p1;
wire   [31:0] tmp_116_fu_1038_p2;
wire   [24:0] tmp_121_fu_1043_p1;
wire  signed [15:0] index_i_3_fu_1060_p1;
wire  signed [15:0] index_jj_3_fu_1065_p0;
wire   [5:0] grp_fu_1070_p0;
wire    ap_CS_fsm_state20;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_reg_ioackin_m_axi_input_r_ARREADY = 1'b0;
end

zhang_cnn_fpext_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
zhang_cnn_fpext_3bkb_U1(
    .din0(input_addr_read_reg_1284),
    .dout(d_assign_fu_326_p1)
);

zhang_cnn_mul_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
zhang_cnn_mul_mulcud_U2(
    .din0(curr_layer_in_h),
    .din1(curr_layer_in_w),
    .dout(tmp38_fu_1056_p2)
);

zhang_cnn_mul_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
zhang_cnn_mul_mulcud_U3(
    .din0(curr_layer_in_w),
    .din1(index_i_3_fu_1060_p1),
    .dout(index_i_3_fu_1060_p2)
);

zhang_cnn_mul_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
zhang_cnn_mul_mulcud_U4(
    .din0(index_jj_3_fu_1065_p0),
    .din1(tmp38_reg_1183),
    .dout(index_jj_3_fu_1065_p2)
);

zhang_cnn_mac_muldEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
zhang_cnn_mac_muldEe_U5(
    .din0(grp_fu_1070_p0),
    .din1(tmp_100_reg_1239),
    .din2(tmp_99_reg_1234),
    .dout(grp_fu_1070_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state5 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_reg_pp0_iter2_tmp_92_reg_1193 == 1'd1))) begin
            if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'b1 == m_axi_input_r_ARREADY))) begin
                ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_92_reg_1193 == 1'd1))) begin
        i_reg_293 <= i_2_reg_1224;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_293 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_tmp_92_reg_1193))) begin
        index_i_reg_258 <= index_i_2_reg_1258;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        index_i_reg_258 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_tmp_92_reg_1193))) begin
        index_jj_reg_270 <= index_jj_2_reg_1263;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        index_jj_reg_270 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_92_fu_614_p2))) begin
        itr_reg_282 <= itr_2_fu_619_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        itr_reg_282 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_92_fu_614_p2))) begin
        j_reg_304 <= j_3_fu_730_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_304 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_92_reg_1193 == 1'd1))) begin
        jj_reg_315 <= jj_2_reg_1229;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        jj_reg_315 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
        ap_reg_pp0_iter10_tmp_109_reg_1268 <= ap_reg_pp0_iter9_tmp_109_reg_1268;
        ap_reg_pp0_iter10_tmp_122_reg_1249 <= ap_reg_pp0_iter9_tmp_122_reg_1249;
        ap_reg_pp0_iter10_tmp_92_reg_1193 <= ap_reg_pp0_iter9_tmp_92_reg_1193;
        ap_reg_pp0_iter11_tmp_109_reg_1268 <= ap_reg_pp0_iter10_tmp_109_reg_1268;
        ap_reg_pp0_iter11_tmp_122_reg_1249 <= ap_reg_pp0_iter10_tmp_122_reg_1249;
        ap_reg_pp0_iter11_tmp_92_reg_1193 <= ap_reg_pp0_iter10_tmp_92_reg_1193;
        ap_reg_pp0_iter12_isneg_reg_1289 <= isneg_reg_1289;
        ap_reg_pp0_iter12_tmp_104_reg_1305 <= tmp_104_reg_1305;
        ap_reg_pp0_iter12_tmp_109_reg_1268 <= ap_reg_pp0_iter11_tmp_109_reg_1268;
        ap_reg_pp0_iter12_tmp_122_reg_1249 <= ap_reg_pp0_iter11_tmp_122_reg_1249;
        ap_reg_pp0_iter12_tmp_92_reg_1193 <= ap_reg_pp0_iter11_tmp_92_reg_1193;
        ap_reg_pp0_iter13_tmp_109_reg_1268 <= ap_reg_pp0_iter12_tmp_109_reg_1268;
        ap_reg_pp0_iter13_tmp_119_reg_1335 <= tmp_119_reg_1335;
        ap_reg_pp0_iter13_tmp_122_reg_1249 <= ap_reg_pp0_iter12_tmp_122_reg_1249;
        ap_reg_pp0_iter2_tmp_109_reg_1268 <= tmp_109_reg_1268;
        ap_reg_pp0_iter2_tmp_122_reg_1249 <= ap_reg_pp0_iter1_tmp_122_reg_1249;
        ap_reg_pp0_iter2_tmp_92_reg_1193 <= ap_reg_pp0_iter1_tmp_92_reg_1193;
        ap_reg_pp0_iter3_tmp_109_reg_1268 <= ap_reg_pp0_iter2_tmp_109_reg_1268;
        ap_reg_pp0_iter3_tmp_122_reg_1249 <= ap_reg_pp0_iter2_tmp_122_reg_1249;
        ap_reg_pp0_iter3_tmp_92_reg_1193 <= ap_reg_pp0_iter2_tmp_92_reg_1193;
        ap_reg_pp0_iter4_tmp_109_reg_1268 <= ap_reg_pp0_iter3_tmp_109_reg_1268;
        ap_reg_pp0_iter4_tmp_122_reg_1249 <= ap_reg_pp0_iter3_tmp_122_reg_1249;
        ap_reg_pp0_iter4_tmp_92_reg_1193 <= ap_reg_pp0_iter3_tmp_92_reg_1193;
        ap_reg_pp0_iter5_tmp_109_reg_1268 <= ap_reg_pp0_iter4_tmp_109_reg_1268;
        ap_reg_pp0_iter5_tmp_122_reg_1249 <= ap_reg_pp0_iter4_tmp_122_reg_1249;
        ap_reg_pp0_iter5_tmp_92_reg_1193 <= ap_reg_pp0_iter4_tmp_92_reg_1193;
        ap_reg_pp0_iter6_tmp_109_reg_1268 <= ap_reg_pp0_iter5_tmp_109_reg_1268;
        ap_reg_pp0_iter6_tmp_122_reg_1249 <= ap_reg_pp0_iter5_tmp_122_reg_1249;
        ap_reg_pp0_iter6_tmp_92_reg_1193 <= ap_reg_pp0_iter5_tmp_92_reg_1193;
        ap_reg_pp0_iter7_tmp_109_reg_1268 <= ap_reg_pp0_iter6_tmp_109_reg_1268;
        ap_reg_pp0_iter7_tmp_122_reg_1249 <= ap_reg_pp0_iter6_tmp_122_reg_1249;
        ap_reg_pp0_iter7_tmp_92_reg_1193 <= ap_reg_pp0_iter6_tmp_92_reg_1193;
        ap_reg_pp0_iter8_tmp_109_reg_1268 <= ap_reg_pp0_iter7_tmp_109_reg_1268;
        ap_reg_pp0_iter8_tmp_122_reg_1249 <= ap_reg_pp0_iter7_tmp_122_reg_1249;
        ap_reg_pp0_iter8_tmp_92_reg_1193 <= ap_reg_pp0_iter7_tmp_92_reg_1193;
        ap_reg_pp0_iter9_tmp_109_reg_1268 <= ap_reg_pp0_iter8_tmp_109_reg_1268;
        ap_reg_pp0_iter9_tmp_122_reg_1249 <= ap_reg_pp0_iter8_tmp_122_reg_1249;
        ap_reg_pp0_iter9_tmp_92_reg_1193 <= ap_reg_pp0_iter8_tmp_92_reg_1193;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_tmp_122_reg_1249 <= tmp_122_reg_1249;
        ap_reg_pp0_iter1_tmp_92_reg_1193 <= tmp_92_reg_1193;
        tmp_92_reg_1193 <= tmp_92_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter10_tmp_92_reg_1193))) begin
        exp_tmp_V_reg_1295 <= {{ireg_V_fu_808_p1[62:52]}};
        isneg_reg_1289 <= ireg_V_fu_808_p1[32'd63];
        tmp_104_reg_1305 <= tmp_104_fu_838_p2;
        tmp_118_reg_1300 <= tmp_118_fu_834_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_92_fu_614_p2))) begin
        i_2_reg_1224 <= i_2_fu_681_p3;
        jj_2_reg_1229 <= jj_2_fu_705_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_reg_1099 <= icmp_fu_397_p2;
        n_cols_reg_1094 <= n_cols_fu_379_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_92_reg_1193 == 1'd1))) begin
        index_i_2_reg_1258 <= index_i_2_fu_742_p3;
        index_jj_2_reg_1263 <= index_jj_2_fu_755_p3;
        tmp_109_reg_1268 <= grp_fu_1070_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_92_fu_614_p2))) begin
        index_i_3_reg_1208 <= index_i_3_fu_1060_p2;
        index_jj_3_reg_1213 <= index_jj_3_fu_1065_p2;
        sel_tmp_reg_1218 <= sel_tmp_fu_667_p2;
        tmp39_reg_1244 <= tmp39_fu_721_p2;
        tmp_100_reg_1239 <= tmp_100_fu_717_p1;
        tmp_122_reg_1249 <= tmp_122_fu_726_p1;
        tmp_93_reg_1202 <= tmp_93_fu_625_p2;
        tmp_99_reg_1234 <= tmp_99_fu_713_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter9_tmp_92_reg_1193))) begin
        input_addr_read_reg_1284 <= m_axi_input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_tmp_92_reg_1193))) begin
        input_addr_reg_1278 <= sum_cast_fu_798_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter11_tmp_92_reg_1193))) begin
        man_V_6_reg_1311 <= man_V_6_fu_864_p3;
        sh_amt_reg_1322 <= sh_amt_fu_895_p3;
        tmp_105_reg_1316 <= tmp_105_fu_877_p2;
        tmp_108_reg_1329 <= tmp_108_fu_903_p2;
        tmp_119_reg_1335 <= tmp_119_fu_909_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_cols_2_reg_1146 <= n_cols_2_fu_531_p3;
        n_depth_1_reg_1152 <= n_depth_1_fu_557_p3;
        n_rows_reg_1141 <= n_rows_fu_489_p3;
        tmp_69_reg_1120 <= tmp_69_fu_406_p1;
        tmp_70_reg_1126 <= tmp_70_fu_414_p2;
        tmp_72_reg_1131 <= tmp_72_fu_424_p2;
        tmp_74_reg_1136 <= tmp_74_fu_433_p2;
        tmp_s_reg_1115 <= tmp_s_fu_403_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        n_rows_2_reg_1157 <= n_rows_2_fu_582_p3;
        tmp37_reg_1163 <= tmp37_fu_590_p2;
        tmp_reg_1168 <= tmp_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter12_tmp_92_reg_1193))) begin
        sel_tmp30_reg_1346 <= sel_tmp30_fu_1004_p3;
        sel_tmp32_reg_1351 <= sel_tmp32_fu_1023_p2;
        sh_amt_cast_reg_1341 <= sh_amt_cast_fu_913_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sext_cast_reg_1188[29 : 0] <= sext_cast_fu_606_p1[29 : 0];
        tmp1_reg_1178 <= tmp1_fu_602_p2;
        tmp38_reg_1183 <= tmp38_fu_1056_p2;
        tmp_91_reg_1173 <= tmp_91_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_92_reg_1193 == 1'd1))) begin
        tmp_101_reg_1273 <= tmp_101_fu_785_p2;
    end
end

always @ (*) begin
    if ((1'd0 == tmp_92_fu_614_p2)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter14) & (1'b0 == ap_enable_reg_pp0_iter13) & (1'b0 == ap_enable_reg_pp0_iter12) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter3))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_92_reg_1193 == 1'd1) & (ap_block_pp0_stage0 == 1'b0))) begin
        ap_phi_mux_i_phi_fu_297_p4 = i_2_reg_1224;
    end else begin
        ap_phi_mux_i_phi_fu_297_p4 = i_reg_293;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_tmp_92_reg_1193) & (ap_block_pp0_stage0 == 1'b0))) begin
        ap_phi_mux_index_i_phi_fu_262_p4 = index_i_2_reg_1258;
    end else begin
        ap_phi_mux_index_i_phi_fu_262_p4 = index_i_reg_258;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_tmp_92_reg_1193) & (ap_block_pp0_stage0 == 1'b0))) begin
        ap_phi_mux_index_jj_phi_fu_274_p4 = index_jj_2_reg_1263;
    end else begin
        ap_phi_mux_index_jj_phi_fu_274_p4 = index_jj_reg_270;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_92_reg_1193 == 1'd1) & (ap_block_pp0_stage0 == 1'b0))) begin
        ap_phi_mux_jj_phi_fu_319_p4 = jj_2_reg_1229;
    end else begin
        ap_phi_mux_jj_phi_fu_319_p4 = jj_reg_315;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = m_axi_input_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_reg_pp0_iter2_tmp_92_reg_1193 == 1'd1) & (ap_block_pp0_stage0 == 1'b0))) begin
        input_r_blk_n_AR = m_axi_input_r_ARREADY;
    end else begin
        input_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter10) & (1'd1 == ap_reg_pp0_iter9_tmp_92_reg_1193) & (ap_block_pp0_stage0 == 1'b0))) begin
        input_r_blk_n_R = m_axi_input_r_RVALID;
    end else begin
        input_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14))) begin
        inputfm_0_V_ce0 = 1'b1;
    end else begin
        inputfm_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((2'd0 == ap_reg_pp0_iter13_tmp_122_reg_1249) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14))) begin
        inputfm_0_V_we0 = 1'b1;
    end else begin
        inputfm_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14))) begin
        inputfm_1_V_ce0 = 1'b1;
    end else begin
        inputfm_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter13_tmp_122_reg_1249 == 2'd1) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14))) begin
        inputfm_1_V_we0 = 1'b1;
    end else begin
        inputfm_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14))) begin
        inputfm_2_V_ce0 = 1'b1;
    end else begin
        inputfm_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(2'd0 == ap_reg_pp0_iter13_tmp_122_reg_1249) & ~(ap_reg_pp0_iter13_tmp_122_reg_1249 == 2'd1) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14))) begin
        inputfm_2_V_we0 = 1'b1;
    end else begin
        inputfm_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_reg_pp0_iter2_tmp_92_reg_1193 == 1'd1))) begin
        m_axi_input_r_ARVALID = 1'b1;
    end else begin
        m_axi_input_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (1'd1 == ap_reg_pp0_iter9_tmp_92_reg_1193))) begin
        m_axi_input_r_RREADY = 1'b1;
    end else begin
        m_axi_input_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'd0 == tmp_92_fu_614_p2) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) & ~((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14)) | ((1'd0 == tmp_92_fu_614_p2) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_871_p2 = (12'd1075 - tmp_103_fu_844_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == m_axi_input_r_RVALID) & (1'b1 == ap_enable_reg_pp0_iter10) & (1'd1 == ap_reg_pp0_iter9_tmp_92_reg_1193));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == m_axi_input_r_RVALID) & (1'b1 == ap_enable_reg_pp0_iter10) & (1'd1 == ap_reg_pp0_iter9_tmp_92_reg_1193)) | ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_block_state8_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == m_axi_input_r_RVALID) & (1'b1 == ap_enable_reg_pp0_iter10) & (1'd1 == ap_reg_pp0_iter9_tmp_92_reg_1193)) | ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_block_state8_io)));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage0_iter10 = ((1'b0 == m_axi_input_r_RVALID) & (1'd1 == ap_reg_pp0_iter9_tmp_92_reg_1193));
end

assign ap_block_state16_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY) & (ap_reg_pp0_iter2_tmp_92_reg_1193 == 1'd1));
end

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_1070_p0 = 11'd27;

assign i_2_fu_681_p3 = ((tmp_93_fu_625_p2[0:0] === 1'b1) ? sel_tmp9_fu_673_p3 : ap_phi_mux_i_phi_fu_297_p4);

assign i_3_fu_634_p2 = (32'd1 + ap_phi_mux_i_phi_fu_297_p4);

assign icmp_fu_397_p2 = (($signed(tmp_80_fu_387_p4) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign index_i_2_fu_742_p3 = ((tmp_93_reg_1202[0:0] === 1'b1) ? sel_tmp1_fu_736_p3 : ap_phi_mux_index_i_phi_fu_262_p4);

assign index_i_3_fu_1060_p1 = (16'd1 + tmp_94_fu_630_p1);

assign index_jj_2_fu_755_p3 = ((tmp_93_reg_1202[0:0] === 1'b1) ? index_jj_4_fu_749_p3 : ap_phi_mux_index_jj_phi_fu_274_p4);

assign index_jj_3_fu_1065_p0 = (16'd1 + tmp_97_fu_651_p1);

assign index_jj_4_fu_749_p3 = ((sel_tmp_reg_1218[0:0] === 1'b1) ? index_jj_3_reg_1213 : ap_phi_mux_index_jj_phi_fu_274_p4);

assign inputfm_0_V_address0 = tmp_119_cast1_fu_1029_p1;

assign inputfm_0_V_d0 = storemerge3_fu_1047_p3;

assign inputfm_1_V_address0 = tmp_119_cast1_fu_1029_p1;

assign inputfm_1_V_d0 = storemerge3_fu_1047_p3;

assign inputfm_2_V_address0 = tmp_119_cast1_fu_1029_p1;

assign inputfm_2_V_d0 = storemerge3_fu_1047_p3;

assign ireg_V_fu_808_p1 = d_assign_fu_326_p1;

assign itr_2_fu_619_p2 = (itr_reg_282 + 31'd1);

assign itr_cast_fu_610_p1 = itr_reg_282;

assign j_2_fu_689_p3 = ((tmp_93_fu_625_p2[0:0] === 1'b1) ? 32'd0 : j_reg_304);

assign j_3_fu_730_p2 = (j_2_fu_689_p3 + 32'd1);

assign jj_2_fu_705_p3 = ((tmp_93_fu_625_p2[0:0] === 1'b1) ? jj_4_fu_697_p3 : ap_phi_mux_jj_phi_fu_319_p4);

assign jj_3_fu_655_p2 = (32'd1 + ap_phi_mux_jj_phi_fu_319_p4);

assign jj_4_fu_697_p3 = ((sel_tmp_fu_667_p2[0:0] === 1'b1) ? jj_3_fu_655_p2 : ap_phi_mux_jj_phi_fu_319_p4);

assign m_axi_input_r_ARADDR = input_addr_reg_1278;

assign m_axi_input_r_ARBURST = 2'd0;

assign m_axi_input_r_ARCACHE = 4'd0;

assign m_axi_input_r_ARID = 1'd0;

assign m_axi_input_r_ARLEN = 32'd1;

assign m_axi_input_r_ARLOCK = 2'd0;

assign m_axi_input_r_ARPROT = 3'd0;

assign m_axi_input_r_ARQOS = 4'd0;

assign m_axi_input_r_ARREGION = 4'd0;

assign m_axi_input_r_ARSIZE = 3'd0;

assign m_axi_input_r_ARUSER = 1'd0;

assign m_axi_input_r_AWADDR = 32'd0;

assign m_axi_input_r_AWBURST = 2'd0;

assign m_axi_input_r_AWCACHE = 4'd0;

assign m_axi_input_r_AWID = 1'd0;

assign m_axi_input_r_AWLEN = 32'd0;

assign m_axi_input_r_AWLOCK = 2'd0;

assign m_axi_input_r_AWPROT = 3'd0;

assign m_axi_input_r_AWQOS = 4'd0;

assign m_axi_input_r_AWREGION = 4'd0;

assign m_axi_input_r_AWSIZE = 3'd0;

assign m_axi_input_r_AWUSER = 1'd0;

assign m_axi_input_r_AWVALID = 1'b0;

assign m_axi_input_r_BREADY = 1'b0;

assign m_axi_input_r_WDATA = 32'd0;

assign m_axi_input_r_WID = 1'd0;

assign m_axi_input_r_WLAST = 1'b0;

assign m_axi_input_r_WSTRB = 4'd0;

assign m_axi_input_r_WUSER = 1'd0;

assign m_axi_input_r_WVALID = 1'b0;

assign man_V_5_fu_858_p2 = (54'd0 - p_Result_s_fu_854_p1);

assign man_V_6_fu_864_p3 = ((isneg_reg_1289[0:0] === 1'b1) ? man_V_5_fu_858_p2 : p_Result_s_fu_854_p1);

assign n_cols_2_fu_531_p3 = ((tmp_86_fu_519_p2[0:0] === 1'b1) ? tmp_87_fu_525_p2 : n_cols_cast_fu_497_p1);

assign n_cols_cast_fu_497_p1 = $signed(n_cols_reg_1094);

assign n_cols_fu_379_p3 = ((tmp_79_fu_373_p2[0:0] === 1'b1) ? tmp_78_fu_367_p2 : tmp_cast_fu_329_p1);

assign n_depth_1_fu_557_p3 = ((tmp_89_fu_545_p2[0:0] === 1'b1) ? tmp_90_fu_551_p2 : n_depth_cast_fu_509_p1);

assign n_depth_cast_fu_509_p1 = $signed(n_depth_fu_503_p3);

assign n_depth_fu_503_p3 = ((icmp_reg_1099[0:0] === 1'b1) ? 16'd3 : curr_layer_in_ch);

assign n_rows_2_fu_582_p3 = ((tmp_83_fu_573_p2[0:0] === 1'b1) ? tmp_84_fu_578_p2 : n_rows_cast_fu_565_p1);

assign n_rows_cast_fu_565_p1 = $signed(n_rows_reg_1141);

assign n_rows_fu_489_p3 = ((tmp_76_fu_483_p2[0:0] === 1'b1) ? tmp_75_fu_477_p2 : tmp_119_cast_fu_410_p1);

assign p_Result_s_fu_854_p1 = tmp_67_fu_847_p3;

assign p_shl1_cast_fu_353_p1 = $signed(p_shl1_fu_345_p3);

assign p_shl1_fu_345_p3 = {{curr_layer_str_w}, {3'd0}};

assign p_shl2_cast_fu_447_p1 = $signed(p_shl2_fu_439_p3);

assign p_shl2_fu_439_p3 = {{curr_layer_str_h}, {5'd0}};

assign p_shl3_cast_cast_fu_459_p1 = $signed(p_shl3_fu_451_p3);

assign p_shl3_fu_451_p3 = {{curr_layer_str_h}, {1'd0}};

assign p_shl_cast_fu_341_p1 = $signed(p_shl_fu_333_p3);

assign p_shl_fu_333_p3 = {{curr_layer_str_w}, {5'd0}};

assign sel_tmp1_fu_736_p3 = ((sel_tmp_reg_1218[0:0] === 1'b1) ? 16'd0 : index_i_3_reg_1208);

assign sel_tmp21_fu_946_p2 = (ap_reg_pp0_iter12_tmp_104_reg_1305 ^ 1'd1);

assign sel_tmp22_fu_951_p2 = (tmp_108_reg_1329 & sel_tmp21_fu_946_p2);

assign sel_tmp23_fu_956_p3 = ((sel_tmp22_fu_951_p2[0:0] === 1'b1) ? tmp_119_reg_1335 : 25'd0);

assign sel_tmp24_fu_967_p2 = (sel_tmp26_demorgan_fu_963_p2 ^ 1'd1);

assign sel_tmp25_fu_973_p2 = (tmp_105_reg_1316 & sel_tmp24_fu_967_p2);

assign sel_tmp26_demorgan_fu_963_p2 = (tmp_108_reg_1329 | ap_reg_pp0_iter12_tmp_104_reg_1305);

assign sel_tmp26_fu_978_p2 = (tmp_110_fu_916_p2 ^ 1'd1);

assign sel_tmp27_fu_984_p2 = (sel_tmp26_fu_978_p2 & sel_tmp25_fu_973_p2);

assign sel_tmp28_fu_990_p3 = ((sel_tmp27_fu_984_p2[0:0] === 1'b1) ? storemerge_fu_939_p3 : sel_tmp23_fu_956_p3);

assign sel_tmp29_fu_998_p2 = (tmp_110_fu_916_p2 & sel_tmp25_fu_973_p2);

assign sel_tmp30_fu_1004_p3 = ((sel_tmp29_fu_998_p2[0:0] === 1'b1) ? tmp_120_fu_935_p1 : sel_tmp28_fu_990_p3);

assign sel_tmp31_fu_1017_p2 = (sel_tmp41_demorgan_fu_1012_p2 ^ 1'd1);

assign sel_tmp32_fu_1023_p2 = (tmp_111_fu_921_p2 & sel_tmp31_fu_1017_p2);

assign sel_tmp41_demorgan_fu_1012_p2 = (tmp_105_reg_1316 | sel_tmp26_demorgan_fu_963_p2);

assign sel_tmp9_fu_673_p3 = ((sel_tmp_fu_667_p2[0:0] === 1'b1) ? 32'd0 : i_3_fu_634_p2);

assign sel_tmp_fu_667_p2 = (tmp_96_fu_646_p2 & tmp_93_fu_625_p2);

assign sext_cast_fu_606_p1 = input_offset;

assign sh_amt_cast_fu_913_p1 = $signed(sh_amt_reg_1322);

assign sh_amt_fu_895_p3 = ((tmp_105_fu_877_p2[0:0] === 1'b1) ? tmp_106_fu_883_p2 : tmp_107_fu_889_p2);

assign storemerge3_fu_1047_p3 = ((sel_tmp32_reg_1351[0:0] === 1'b1) ? tmp_121_fu_1043_p1 : sel_tmp30_reg_1346);

assign storemerge_fu_939_p3 = ((ap_reg_pp0_iter12_isneg_reg_1289[0:0] === 1'b1) ? 25'd33554431 : 25'd0);

assign sum_cast_fu_798_p1 = $signed(sum_fu_793_p2);

assign sum_fu_793_p2 = ($signed(tmp_102_cast_fu_790_p1) + $signed(sext_cast_reg_1188));

assign tmp1_fu_602_p1 = tmp_s_reg_1115;

assign tmp1_fu_602_p2 = ($signed(tmp_reg_1168) * $signed(tmp1_fu_602_p1));

assign tmp36_fu_467_p2 = ($signed(p_shl3_cast_cast_fu_459_p1) + $signed(tmp_126_cast_cast_fu_463_p1));

assign tmp37_fu_590_p2 = ($signed(n_cols_2_reg_1146) * $signed(n_depth_1_reg_1152));

assign tmp39_fu_721_p2 = (j_2_fu_689_p3 + tmp_74_reg_1136);

assign tmp40_fu_770_p2 = (tmp_113_cast_fu_762_p1 + tmp_114_cast_fu_766_p1);

assign tmp41_fu_780_p2 = (tmp1_reg_1178 + tmp49_cast_fu_776_p1);

assign tmp44_cast_fu_473_p1 = $signed(tmp36_fu_467_p2);

assign tmp49_cast_fu_776_p1 = tmp40_fu_770_p2;

assign tmp_100_fu_717_p1 = i_2_fu_681_p3[10:0];

assign tmp_101_fu_785_p2 = (tmp39_reg_1244 + tmp41_fu_780_p2);

assign tmp_102_cast_fu_790_p1 = $signed(tmp_101_reg_1273);

assign tmp_103_fu_844_p1 = exp_tmp_V_reg_1295;

assign tmp_104_fu_838_p2 = ((tmp_114_fu_812_p1 == 63'd0) ? 1'b1 : 1'b0);

assign tmp_105_fu_877_p2 = (($signed(F2_fu_871_p2) > $signed(12'd20)) ? 1'b1 : 1'b0);

assign tmp_106_fu_883_p2 = ($signed(12'd4076) + $signed(F2_fu_871_p2));

assign tmp_107_fu_889_p2 = (12'd20 - F2_fu_871_p2);

assign tmp_108_fu_903_p2 = ((F2_fu_871_p2 == 12'd20) ? 1'b1 : 1'b0);

assign tmp_110_fu_916_p2 = ((sh_amt_reg_1322 < 12'd54) ? 1'b1 : 1'b0);

assign tmp_111_fu_921_p2 = ((sh_amt_reg_1322 < 12'd25) ? 1'b1 : 1'b0);

assign tmp_112_fu_926_p1 = $unsigned(sh_amt_cast_fu_913_p1);

assign tmp_113_cast_fu_762_p1 = index_jj_2_fu_755_p3;

assign tmp_113_fu_930_p2 = $signed(man_V_6_reg_1311) >>> tmp_112_fu_926_p1;

assign tmp_114_cast_fu_766_p1 = index_i_2_fu_742_p3;

assign tmp_114_fu_812_p1 = ireg_V_fu_808_p1[62:0];

assign tmp_115_fu_1035_p1 = $signed(ap_reg_pp0_iter13_tmp_119_reg_1335);

assign tmp_116_fu_1038_p2 = tmp_115_fu_1035_p1 << sh_amt_cast_reg_1341;

assign tmp_118_fu_834_p1 = ireg_V_fu_808_p1[51:0];

assign tmp_119_cast1_fu_1029_p1 = ap_reg_pp0_iter13_tmp_109_reg_1268;

assign tmp_119_cast_fu_410_p0 = curr_layer_in_h;

assign tmp_119_cast_fu_410_p1 = tmp_119_cast_fu_410_p0;

assign tmp_119_fu_909_p1 = man_V_6_fu_864_p3[24:0];

assign tmp_120_fu_935_p1 = tmp_113_fu_930_p2[24:0];

assign tmp_121_fu_1043_p1 = tmp_116_fu_1038_p2[24:0];

assign tmp_122_fu_726_p1 = jj_2_fu_705_p3[1:0];

assign tmp_126_cast_cast_fu_463_p1 = $signed(curr_layer_ker_h);

assign tmp_130_cast_fu_363_p1 = $signed(curr_layer_ker_w);

assign tmp_67_fu_847_p3 = {{1'd1}, {tmp_118_reg_1300}};

assign tmp_69_fu_406_p0 = curr_layer_in_h;

assign tmp_69_fu_406_p1 = tmp_69_fu_406_p0;

assign tmp_70_fu_414_p0 = ti;

assign tmp_70_fu_414_p1 = tmp_69_fu_406_p0;

assign tmp_70_fu_414_p2 = ($signed(tmp_70_fu_414_p0) * $signed(tmp_70_fu_414_p1));

assign tmp_72_fu_424_p0 = row;

assign tmp_72_fu_424_p1 = curr_layer_str_h;

assign tmp_72_fu_424_p2 = ($signed(tmp_72_fu_424_p0) * $signed(tmp_72_fu_424_p1));

assign tmp_74_fu_433_p0 = col;

assign tmp_74_fu_433_p1 = curr_layer_str_w;

assign tmp_74_fu_433_p2 = ($signed(tmp_74_fu_433_p0) * $signed(tmp_74_fu_433_p1));

assign tmp_75_fu_477_p2 = ($signed(tmp44_cast_fu_473_p1) + $signed(p_shl2_cast_fu_447_p1));

assign tmp_76_fu_483_p2 = (($signed(tmp_75_fu_477_p2) < $signed(tmp_119_cast_fu_410_p1)) ? 1'b1 : 1'b0);

assign tmp_77_fu_357_p2 = ($signed(p_shl_cast_fu_341_p1) - $signed(p_shl1_cast_fu_353_p1));

assign tmp_78_fu_367_p2 = ($signed(tmp_77_fu_357_p2) + $signed(tmp_130_cast_fu_363_p1));

assign tmp_79_fu_373_p2 = (($signed(tmp_78_fu_367_p2) < $signed(tmp_cast_fu_329_p1)) ? 1'b1 : 1'b0);

assign tmp_80_fu_387_p4 = {{curr_layer_in_ch[15:2]}};

assign tmp_81_fu_500_p1 = $signed(curr_layer_in_ch);

assign tmp_82_fu_568_p0 = row;

assign tmp_82_fu_568_p2 = ($signed(tmp_82_fu_568_p0) + $signed(n_rows_cast_fu_565_p1));

assign tmp_83_fu_573_p2 = (($signed(tmp_82_fu_568_p2) > $signed(tmp_69_reg_1120)) ? 1'b1 : 1'b0);

assign tmp_84_fu_578_p1 = row;

assign tmp_84_fu_578_p2 = ($signed(tmp_69_reg_1120) - $signed(tmp_84_fu_578_p1));

assign tmp_85_fu_513_p0 = col;

assign tmp_85_fu_513_p2 = ($signed(tmp_85_fu_513_p0) + $signed(n_cols_cast_fu_497_p1));

assign tmp_86_fu_519_p2 = (($signed(tmp_85_fu_513_p2) > $signed(tmp_s_fu_403_p1)) ? 1'b1 : 1'b0);

assign tmp_87_fu_525_p1 = col;

assign tmp_87_fu_525_p2 = ($signed(tmp_s_fu_403_p1) - $signed(tmp_87_fu_525_p1));

assign tmp_88_fu_539_p0 = ti;

assign tmp_88_fu_539_p2 = ($signed(tmp_88_fu_539_p0) + $signed(n_depth_cast_fu_509_p1));

assign tmp_89_fu_545_p2 = (($signed(tmp_88_fu_539_p2) > $signed(tmp_81_fu_500_p1)) ? 1'b1 : 1'b0);

assign tmp_90_fu_551_p1 = ti;

assign tmp_90_fu_551_p2 = ($signed(tmp_81_fu_500_p1) - $signed(tmp_90_fu_551_p1));

assign tmp_91_fu_598_p2 = ($signed(tmp37_reg_1163) * $signed(n_rows_2_reg_1157));

assign tmp_92_fu_614_p2 = (($signed(itr_cast_fu_610_p1) < $signed(tmp_91_reg_1173)) ? 1'b1 : 1'b0);

assign tmp_93_fu_625_p2 = ((j_reg_304 == n_cols_2_reg_1146) ? 1'b1 : 1'b0);

assign tmp_94_fu_630_p1 = ap_phi_mux_i_phi_fu_297_p4[15:0];

assign tmp_96_fu_646_p2 = ((i_3_fu_634_p2 == n_rows_2_reg_1157) ? 1'b1 : 1'b0);

assign tmp_97_fu_651_p1 = ap_phi_mux_jj_phi_fu_319_p4[15:0];

assign tmp_99_fu_713_p1 = j_2_fu_689_p3[10:0];

assign tmp_cast_fu_329_p0 = curr_layer_in_w;

assign tmp_cast_fu_329_p1 = tmp_cast_fu_329_p0;

assign tmp_fu_594_p2 = (tmp_70_reg_1126 + tmp_72_reg_1131);

assign tmp_s_fu_403_p0 = curr_layer_in_w;

assign tmp_s_fu_403_p1 = tmp_s_fu_403_p0;

always @ (posedge ap_clk) begin
    sext_cast_reg_1188[32:30] <= 3'b000;
end

endmodule //read_input
